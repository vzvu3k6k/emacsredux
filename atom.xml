<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Emacs Redux]]></title>
  <link href="http://emacsredux.com/atom.xml" rel="self"/>
  <link href="http://emacsredux.com/"/>
  <updated>2014-03-22T17:02:35+02:00</updated>
  <id>http://emacsredux.com/</id>
  <author>
    <name><![CDATA[Bozhidar Batsov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A peek at Emacs 24.4: Variadic Numeric Comparison Functions]]></title>
    <link href="http://emacsredux.com/blog/2014/03/22/a-peek-at-emacs-24-dot-4-variadic-comparison-functions/"/>
    <updated>2014-03-22T16:48:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/03/22/a-peek-at-emacs-24-dot-4-variadic-comparison-functions</id>
    <content type="html"><![CDATA[<p>In most Lisps numeric comparison functions like <code>=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>
and <code>&gt;=</code> are variadic - meaning they accept variable number of arguments (as do functions like <code>+</code>, <code>-</code>, <code>*</code>, etc).
Here&#8217;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;; let&#39;s assume that all those are numeric variables</span>
</span><span class='line'><span class="p">(</span><span class="nb">=</span> <span class="nv">x</span> <span class="nv">y</span> <span class="nv">z</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">&lt;</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is pretty cool and save you from writing code like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">y</span> <span class="nv">z</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">&lt;</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt;</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt;</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Prefix function position for the win!</p>

<p>In Emacs Lisp, however, all these comparison functions (unlike <code>+</code>, <code>-</code>, etc)
accept just two arguments, which is somewhat unlispy. Luckily this is
one of the things that&#8217;s going to change with Emacs 24.4.
Emacs Lisp takes another small step to becoming a good Lisp dialect!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A peek at Emacs 24.4: Focus Hooks]]></title>
    <link href="http://emacsredux.com/blog/2014/03/22/a-peek-at-emacs-24-dot-4-focus-hooks/"/>
    <updated>2014-03-22T16:05:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/03/22/a-peek-at-emacs-24-dot-4-focus-hooks</id>
    <content type="html"><![CDATA[<p>A couple of years ago I
<a href="http://batsov.com/articles/2012/03/08/emacs-tip-number-5-save-buffers-automatically-on-buffer-or-window-switch/">lamented over the lack of frame focus hooks in Emacs</a>. This
prohibited us from implemented a feature like IntelliJ IDEA&#8217;s &#8220;auto-save on
focus lost&#8221;, which was kind of frustrating as we&#8217;re generally assuming that everything is doable in Emacs!</p>

<p>All this changes in Emacs 24.4 with the introduction of two new hooks - <code>focus-in-hook</code> and <code>focus-out-hook</code>.
The first is triggered when the current frame gains focus and the second when the frame loses focus.
So, if we want to save our active buffer when the Emacs frame loses focus we can simply do it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;focus-out-hook</span> <span class="ss">&#39;save-buffer</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or you can go a step further and save all the buffers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;focus-out-hook</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="nv">save-some-buffers</span> <span class="no">t</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I pretty sure you&#8217;ll find other creative ways to apply those new hooks to good use!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A peek at Emacs 24.4: delete-duplicate-lines]]></title>
    <link href="http://emacsredux.com/blog/2014/03/01/a-peek-at-emacs-24-dot-4-delete-duplicate-lines/"/>
    <updated>2014-03-01T17:33:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/03/01/a-peek-at-emacs-24-dot-4-delete-duplicate-lines</id>
    <content type="html"><![CDATA[<p>Emacs 24.4 introduces the command <code>delete-duplicate-lines</code>.</p>

<p>By default <code>M-x delete-duplicate-lines</code> will delete all but one copy
of any identical lines in the region. So assuming this is the region:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>test
</span><span class='line'>dup
</span><span class='line'>dup
</span><span class='line'>one
</span><span class='line'>two
</span><span class='line'>one
</span><span class='line'>three
</span><span class='line'>one
</span><span class='line'>test
</span><span class='line'>five</span></code></pre></td></tr></table></div></figure>


<p>it will be reduced to this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>test
</span><span class='line'>dup
</span><span class='line'>one
</span><span class='line'>two
</span><span class='line'>three
</span><span class='line'>five</span></code></pre></td></tr></table></div></figure>


<p>When the command is invoked with a <code>C-u</code> prefix, it searches backwards
and keeps the last instance of each repeated line. So this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>test
</span><span class='line'>dup
</span><span class='line'>dup
</span><span class='line'>one
</span><span class='line'>two
</span><span class='line'>one
</span><span class='line'>three
</span><span class='line'>one
</span><span class='line'>test
</span><span class='line'>five</span></code></pre></td></tr></table></div></figure>


<p>will become:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dup
</span><span class='line'>two
</span><span class='line'>three
</span><span class='line'>one
</span><span class='line'>test
</span><span class='line'>five</span></code></pre></td></tr></table></div></figure>


<p>Identical lines need not be adjacent, unless you&#8217;ve invoked the
command with a <code>C-u C-u</code> prefix.  When the command is invoked with a
<code>C-u C-u C-u</code> prefix, it retains repeated blank lines.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A peek at Emacs 24.4: hash-table-keys &amp; hash-table-values]]></title>
    <link href="http://emacsredux.com/blog/2014/02/02/a-peek-at-emacs-24-dot-4-hash-table-keys-and-hash-table-values/"/>
    <updated>2014-02-02T09:59:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/02/02/a-peek-at-emacs-24-dot-4-hash-table-keys-and-hash-table-values</id>
    <content type="html"><![CDATA[<p>While Emacs has a pretty good hash-table API, two functions were
rather mysteriously absent from it - <code>hash-table-keys</code> and
<code>hash-table-values</code> (which would return a list of all keys/values in a
hash-table).</p>

<p>Many people who needed them simply defined them in their code
directly (usually in terms of <code>maphash</code>), but that&#8217;s no longer
necessary in Emacs 24.4, as they are now part of the new built-in
library <code>subr-x</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;; all functions in the library are defined as inline, so you don&#39;t</span>
</span><span class='line'><span class="c1">;; need to require the library at runtime</span>
</span><span class='line'><span class="p">(</span><span class="nv">eval-when-compile</span> <span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;subr-x</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">h</span> <span class="p">(</span><span class="nb">make-hash-table</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">puthash</span> <span class="s">&quot;Batman&quot;</span> <span class="s">&quot;Bruce Wayne&quot;</span> <span class="nv">h</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">puthash</span> <span class="s">&quot;Spiderman&quot;</span> <span class="s">&quot;Peter Parker&quot;</span> <span class="nv">h</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">puthash</span> <span class="s">&quot;Superman&quot;</span> <span class="s">&quot;Clark Kent&quot;</span> <span class="nv">h</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">hash-table-keys</span> <span class="nv">h</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; (&quot;Batman&quot; &quot;Spiderman&quot; &quot;Superman&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">hash-table-values</span> <span class="nv">h</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; (&quot;Bruce Wayne&quot; &quot;Peter Parker&quot; &quot;Clark Kent&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nice and simple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A peek at Emacs 24.4: New string manipulation functions]]></title>
    <link href="http://emacsredux.com/blog/2014/02/02/a-peek-at-emacs-24-dot-4-new-string-manipulation-functions/"/>
    <updated>2014-02-02T09:29:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/02/02/a-peek-at-emacs-24-dot-4-new-string-manipulation-functions</id>
    <content type="html"><![CDATA[<p>Emacs has often been criticized for failing to provide a more
extensive string manipulation API (compared to that of programming
languages like Ruby and Perl, for instance).  As many programs
(extensions) running on top of it are doing quite a lot of string
manipulation, having a good string API is important. To compensate the
lack of certain primitives in Emacs itself a lot of package authors
are using these days packages like
<a href="https://github.com/magnars/s.el">s.el</a> or simply adding the string
functions they need directly to their packages (to reduce the number
of third-party deps).</p>

<p>In Emacs 24.4 finally the situation is improving. Finally, we&#8217;re getting
<code>string-suffix-p</code>, which was mysteriously missing even though <code>string-prefix-p</code>
has been part of Emacs for years:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">string-suffix-p</span> <span class="s">&quot;test&quot;</span> <span class="s">&quot;my_test&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; t</span>
</span><span class='line'><span class="p">(</span><span class="nv">string-suffix-p</span> <span class="s">&quot;tester&quot;</span> <span class="s">&quot;my_test&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>More importantly, Emacs 24.4 ships with a new built-in library called <code>subr-x</code>, which features
a bunch of other string manipulation functions:</p>

<ul>
<li><code>string-blank-p</code></li>
<li><code>string-empty-p</code></li>
<li><code>string-join</code></li>
<li><code>string-reverse</code></li>
<li><code>string-trim-left</code></li>
<li><code>string-trim-right</code></li>
<li><code>string-trim</code></li>
<li><code>string-remove-prefix</code></li>
<li><code>string-remove-suffix</code></li>
</ul>


<p>Here&#8217;s a brief demo of them in action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;; all functions in the library are defined as inline, so you don&#39;t</span>
</span><span class='line'><span class="c1">;; need to require the library at runtime</span>
</span><span class='line'><span class="p">(</span><span class="nv">eval-when-compile</span> <span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;subr-x</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">string-empty-p</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; t</span>
</span><span class='line'><span class="p">(</span><span class="nv">string-empty-p</span> <span class="s">&quot;  &quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; nil</span>
</span><span class='line'><span class="p">(</span><span class="nv">string-blank-p</span> <span class="s">&quot;  &quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; 0 (#o0, #x0, ?\C-@)</span>
</span><span class='line'><span class="p">(</span><span class="nv">string-reverse</span> <span class="s">&quot;Batman&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; &quot;namtaB&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nv">string-join</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;one&quot;</span> <span class="s">&quot;two&quot;</span> <span class="s">&quot;three&quot;</span><span class="p">))</span>
</span><span class='line'><span class="c1">; =&gt; &quot;onetwothree&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nv">string-join</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;one&quot;</span> <span class="s">&quot;two&quot;</span> <span class="s">&quot;three&quot;</span><span class="p">)</span> <span class="s">&quot;,&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; &quot;one,two,three&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nb">string-trim</span> <span class="s">&quot;   Peter Parker &quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; &quot;Peter Parker&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nv">string-remove-prefix</span> <span class="s">&quot;Mr. &quot;</span> <span class="s">&quot;Mr. Smith&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; &quot;Smith&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nv">string-remove-suffix</span> <span class="s">&quot;Smith&quot;</span> <span class="s">&quot;Mr. Smith&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; &quot;Mr. &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sure, <code>subr-x</code> is not as extensive as <code>s.el</code> (and will never be), but
I think that it&#8217;s a big step in the right direction. It&#8217;s likely that
<code>subr-x</code> will be extended in subsequent Emacs versions and some of the
functions from it will be promoted to <code>built-in</code>.</p>

<p>That&#8217;s all I have for now. Until next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A peek at Emacs 24.4: auto-indentation by default]]></title>
    <link href="http://emacsredux.com/blog/2014/01/19/a-peek-at-emacs-24-dot-4-auto-indentation-by-default/"/>
    <updated>2014-01-19T08:52:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/01/19/a-peek-at-emacs-24-dot-4-auto-indentation-by-default</id>
    <content type="html"><![CDATA[<p>I&#8217;ve written in the past about
<a href="http://emacsredux.com/blog/2013/03/29/automatic-electric-indentation/">electric-indent-mode</a>,
which was added in Emacs 24.1. In Emacs 24.4 one of the most prominent
user visible changes is that it&#8217;s enabled out-of-the box. That&#8217;s a
huge step towards the &#8220;modernization&#8221; of Emacs and one of the bigger
changes to the defaults in recent times. Let&#8217;s review briefly how the
mode works with a couple of Ruby examples (<code>|</code> signifies the cursor
position). Without <code>electric-indent-mode</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">something</span><span class="o">|</span>
</span></code></pre></td></tr></table></div></figure>


<p>After you press <code>Return</code> you&#8217;ll get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">something</span>
</span><span class='line'><span class="o">|</span>
</span></code></pre></td></tr></table></div></figure>


<p>With it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">something</span><span class="o">|</span>
</span></code></pre></td></tr></table></div></figure>


<p>After you press <code>Return</code> you&#8217;ll get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">something</span>
</span><span class='line'>  <span class="o">|</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nice, ah?</p>

<p>One problem with <code>electric-indent-mode</code> is that it doesn&#8217;t play nice
with some (mostly third-party) modes (<code>yaml-mode</code>, <code>slim-mode</code>,
etc). I guess the situation will improve over time, but for now you
can simply disable the mode in such problematic cases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;yaml-mode-hook</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="nv">electric-indent-local-mode</span> <span class="mi">-1</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that <code>electric-indent-local-mode</code> was introduced in Emacs 24.4.</p>

<p>If you want to make a major mode electric-indent aware, have a look at
the documentation of <code>electric-indent-functions</code> and
<code>electric-indent-chars</code>.</p>

<p><strong>P.S.</strong></p>

<p>Dmitry Gutov recently wrote
<a href="http://dgutov.github.io/blog/2014/01/20/electric-indentation-in-ruby-in-emacs-24-dot-4/">more on the topic</a>
in the context of <code>ruby-mode</code> in Emacs 24.4.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ido-vertical-mode]]></title>
    <link href="http://emacsredux.com/blog/2014/01/18/ido-vertical-mode/"/>
    <updated>2014-01-18T08:52:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/01/18/ido-vertical-mode</id>
    <content type="html"><![CDATA[<p>If you like <code>ido</code>, but don&#8217;t like the way it displays the available
completion candidates you might want to have a look at
<a href="https://github.com/gempesaw/ido-vertical-mode.el">ido-vertical-mode</a>.</p>

<p>I won&#8217;t duplicate here the installation instructions, but I&#8217;ll show you
how <code>ido-vertical-mode</code> displays the completion candidates:</p>

<p><img src="https://raw.github.com/gempesaw/ido-vertical-mode.el/master/screenshot.gif"></p>

<p>Is this better than the regular <code>ido</code>? Depends on your personal
preference I guess. But it&#8217;s good to have options, right?</p>

<p>That&#8217;s all for today, folks! Until next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A peek at Emacs 24.4: sRGB colours on OS X]]></title>
    <link href="http://emacsredux.com/blog/2014/01/11/a-peek-at-emacs-24-dot-4-srgb-colours-on-os-x/"/>
    <updated>2014-01-11T13:40:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/01/11/a-peek-at-emacs-24-dot-4-srgb-colours-on-os-x</id>
    <content type="html"><![CDATA[<p>A while ago I wrote about a
<a href="http://emacsredux.com/blog/2013/08/21/color-themes-redux/">colour theme problem specific to OS X</a>.
Thankfully in Emacs 24.4 the OS X (a.k.a. NS) port of Emacs uses sRGB
colours by default (at least on OS X Lion (10.7) and newer), so you&#8217;ll
no longer need to install Emacs from <code>homebrew</code> (or apply an sRGB
colour support patch manually). If for some reason you want to stick
to the colours add this to your Emacs config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">ns-use-srgb-colorspace</span> <span class="no">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I doubt that anyone would want to do that, but the option is there for those of you who want it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A peek at Emacs 24.4: Rectangular selection]]></title>
    <link href="http://emacsredux.com/blog/2014/01/01/a-peek-at-emacs-24-dot-4-rectangular-selection/"/>
    <updated>2014-01-01T12:03:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/01/01/a-peek-at-emacs-24-dot-4-rectangular-selection</id>
    <content type="html"><![CDATA[<p>I&#8217;m extremely fond of rectangle editing (the ability to select a
rectangular region and apply editing commands only to it), but I&#8217;ve
always disliked the fact there was no way to visually highlight the
exact rectangle region you&#8217;ve currently selected. Let&#8217;s delete some
text in a rectangular region (with <code>C-x r d</code>), so you can see where the
problem lies:</p>

<p><img src="http://emacsredux.com/images/articles/rect-old.gif"></p>

<p>It&#8217;s not immediately clear where the rectangle bounds are (it&#8217;s clear
where the rectangle region starts, but it&#8217;s not so clear where it
ends), which is a source of constant confusion for many people.</p>

<p>Emacs 24.4 finally fixed this with the introduction of
<code>rectangle-mark-mode</code> (bound by default to <code>C-x SPC</code>). Let&#8217;s see it in
action:</p>

<p><img src="http://emacsredux.com/images/articles/rect-new.gif"></p>

<p>Perfect!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A peek at Emacs 24.4: Smarter show-paren-mode]]></title>
    <link href="http://emacsredux.com/blog/2013/12/31/a-peek-at-emacs-24-dot-4-smarter-show-paren-mode/"/>
    <updated>2013-12-31T12:09:00+02:00</updated>
    <id>http://emacsredux.com/blog/2013/12/31/a-peek-at-emacs-24-dot-4-smarter-show-paren-mode</id>
    <content type="html"><![CDATA[<p>Some time ago I wrote about
<a href="http://emacsredux.com/blog/2013/11/01/highlight-matching-delimiters-with-smartparens/">highlighting matching delimiters with show-smartparens-mode</a>. In
Emacs 24.4, the built-in <code>show-paren-mode</code> is capable of highlighting
more complex paired delimiters as well (like <code>do/end</code> in Ruby for
instance). There is one limitation to <code>show-paren-mode</code> (compared to
<code>show-smartparens-mode</code>) - it requires that the major mode, that it&#8217;s
used together with (e.g. <code>ruby-mode</code>), is implemented in terms of the
new(ish) SMIE (Simple Minded Indentation Engine). SMIE has been around
since 23.3, but hasn&#8217;t seen much adoption until quite recently. Prior
to Emacs 24.4 very few built-in modes were using it (and just about no
third-party major modes). In Emacs 24.4, however, a lot of modes were
updated to use SMIE (like <code>ruby-mode</code>), so you&#8217;ll be able to enjoy the
<code>show-paren-mode</code> improvement with them.</p>

<p>Here&#8217;s a glimpse of the enhanced <code>show-paren-mode</code> in action:</p>

<p><img src="http://emacsredux.com/images/articles/show-paren-mode.gif"></p>

<p>Long term, I still think that betting on <code>smartparens-mode</code> is a good idea, but if
you prefer to stick with built-in modes - <code>show-paren-mode</code> is now more capable than ever.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A peek at Emacs 24.4]]></title>
    <link href="http://emacsredux.com/blog/2013/12/31/a-peek-at-emacs-24-dot-4/"/>
    <updated>2013-12-31T11:07:00+02:00</updated>
    <id>http://emacsredux.com/blog/2013/12/31/a-peek-at-emacs-24-dot-4</id>
    <content type="html"><![CDATA[<p>Emacs 24.4 is now feature frozen and its release is (probably) just a
few months away at this point. This makes it a good time to start
talking about some of the exciting and not so exciting changes that
will be introduced in it.</p>

<p>Emacs 24.4 is a special for me, since it&#8217;s the first Emacs release to
which I contributed code. On a related note - I&#8217;ve tracked its development
much closer than I used to in previous years and I feel I have lots of interesting
things to share with you.</p>

<p>In a series of smallish posts I&#8217;ll highlight some of the many new features that are
coming in 24.4. Keep in mind that since we&#8217;re talking about unreleased code, there&#8217;s
the chance of changes in the final version of 24.4.</p>

<p>By the way, if you&#8217;re looking for a brief overview of what to expect
in Emacs 24.4 you might have a look at
<a href="http://www.masteringemacs.org/articles/2013/12/29/whats-new-in-emacs-24-4/">Mickey Petersen&#8217;s article on the subject</a>.</p>

<p>The first article in the series will be arriving momentarily!</p>

<h2>Articles in the Series</h2>

<ul>

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->


<li><a href="http://emacsredux.com/blog/2013/12/31/a-peek-at-emacs-24-dot-4-smarter-show-paren-mode/">A peek at Emacs 24.4: Smarter show-paren-mode</a></li>
  <!-- categories if -->


<li><a href="http://emacsredux.com/blog/2014/01/01/a-peek-at-emacs-24-dot-4-rectangular-selection/">A peek at Emacs 24.4: Rectangular selection</a></li>
  <!-- categories if -->


<li><a href="http://emacsredux.com/blog/2014/01/11/a-peek-at-emacs-24-dot-4-srgb-colours-on-os-x/">A peek at Emacs 24.4: sRGB colours on OS X</a></li>
  <!-- categories if -->

  <!-- categories if -->


<li><a href="http://emacsredux.com/blog/2014/01/19/a-peek-at-emacs-24-dot-4-auto-indentation-by-default/">A peek at Emacs 24.4: auto-indentation by default</a></li>
  <!-- categories if -->

  <!-- categories if -->

  <!-- categories if -->


<li><a href="http://emacsredux.com/blog/2014/03/01/a-peek-at-emacs-24-dot-4-delete-duplicate-lines/">A peek at Emacs 24.4: delete-duplicate-lines</a></li>
  <!-- categories if -->


<li><a href="http://emacsredux.com/blog/2014/03/22/a-peek-at-emacs-24-dot-4-focus-hooks/">A peek at Emacs 24.4: Focus Hooks</a></li>
  <!-- categories if -->


<li><a href="http://emacsredux.com/blog/2014/03/22/a-peek-at-emacs-24-dot-4-variadic-comparison-functions/">A peek at Emacs 24.4: Variadic Numeric Comparison Functions</a></li>
  <!-- categories if -->
 <!-- posts for -->
</ul>


<p><strong>P.S.</strong> Emacs 24.4 is fairly stable at this point, so can start using
it today. I&#8217;ve been using it exclusively for about half an year now
and I&#8217;ve rarely come across any issues whatsoever.  If you&#8217;re a Prelude
user - it is 24.4 compatible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A crazy productivity boost: Remap Return to Control]]></title>
    <link href="http://emacsredux.com/blog/2013/11/12/a-crazy-productivity-boost-remap-return-to-control/"/>
    <updated>2013-11-12T17:09:00+02:00</updated>
    <id>http://emacsredux.com/blog/2013/11/12/a-crazy-productivity-boost-remap-return-to-control</id>
    <content type="html"><![CDATA[<p>People have always complained about the awkward positioning of
the two <code>Control</code> keys on modern keyboards. That&#8217;s a fact! Effective Emacs
usage is heavily dependent on the <code>Control</code> keys (yep, both of
them). That&#8217;s also a fact!</p>

<p>A great many Emacs users remap the infrequently used <code>CapsLock</code> key to
<code>Control</code> to alleviate partially the problem with the accessibility of
the control keys. That, while useful, is not sufficient for the
optimal typing experience, since that way you&#8217;re breaking the key
symmetry on both sides of your keyboard. Also - your right pinky has
to go much further than your left one, while you&#8217;re typing. Many
people seem to be using only the left <code>Control</code> and I guess they&#8217;re
not particularly bothered by this, but touch typists like me are
generally quite bothered by such things.</p>

<p>A much better idea would be to leverage a little knows capability of
keyboard input systems and map the <code>Return</code> key to <code>Control</code> only
when it&#8217;s held down (it will behave like a normal <code>Return</code> key in all
other situations). This sounds a bit crazy, but please bear with me for a while.</p>

<p>This radical approach has several advantages.  First and foremost -
it&#8217;s much easier to hit <code>Return</code> with your right pinky than it is to
hit the regular right <code>Control</code> (especially if you&#8217;re using a US
layout keyboard - these have long single row <code>Return</code> keys, compared
to the short 2 row Returns found on European keyboards). Second, if
you&#8217;ve already remapped <code>CapsLock</code> to <code>Control</code> (like you should have
done) you&#8217;re getting a pretty symmetrical mapping on the opposite side
of your keyboard. Last, but not least - it&#8217;s a great option for people
using compact keyboards with no left <code>Control</code> key.</p>

<p>Obviously you&#8217;ll need some keyboard remapping software to make this
trick work. OSX users can use
<a href="http://pqrs.org/macosx/keyremap4macbook/">KeyRemap4MacBook</a> to do
that.  In its settings look up the <code>Change Return</code> section and under
it <code>Return to Control_R (+ When you type Return only, send
Return)</code>. As far as I know this remapping can be done on GNU/Linux systems with <a href="https://github.com/alols/xcape">xcape</a>
(though I haven&#8217;t checked that myself), but I have no idea if it&#8217;s a viable option for Windows users.</p>

<p>All in all - remapping <code>Return</code> to <code>Control</code> should be a big
productivity win for some (the touch typists) of you and should make
your right pinky&#8217;s life easier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Highlight matching delimiters with smartparens]]></title>
    <link href="http://emacsredux.com/blog/2013/11/01/highlight-matching-delimiters-with-smartparens/"/>
    <updated>2013-11-01T16:32:00+02:00</updated>
    <id>http://emacsredux.com/blog/2013/11/01/highlight-matching-delimiters-with-smartparens</id>
    <content type="html"><![CDATA[<p>Some time ago I wrote about
<a href="http://emacsredux.com/blog/2013/04/01/highlight-matching-parentheses/">highlighting matching parentheses</a>
with <code>show-paren-mode</code>. This is definitely useful, but it&#8217;s kind of
restrictive, since parentheses are just a specific kind of paired
delimiter. Single and double quotes are also paired delimiters (at
least in most programmming languages). In the Ruby programmming
language, for instance, <code>do</code> and <code>end</code> also constitute paired
delimiter.</p>

<p><a href="https://github.com/Fuco1/smartparens">smartparens</a> offers
extremely customizable handling of paired delimiters and comes with an
extra minor mode called <code>show-smartparens-mode</code> to highlight
them. This mode totally replaces <code>show-paren-mode</code> and language
specific modes like <code>hirb</code> (which highlights Ruby blocks).</p>

<p>Assuming you&#8217;re already using <code>smartparens</code>, enabling <code>show-smartparens-mode</code> is trivial:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">show-smartparens-global-mode</span> <span class="mi">+1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s a glimpse of it in action:</p>

<p><img src="http://emacsredux.com/images/articles/show-smartparens-mode.gif"></p>

<p>In <a href="https://github.com/bbatsov/prelude">Prelude</a> <code>show-paren-mode</code> was
replaced by <code>show-smartparens-mode</code> some time ago.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Instant access to your shell init file]]></title>
    <link href="http://emacsredux.com/blog/2013/09/27/instant-access-to-your-shell-init-file/"/>
    <updated>2013-09-27T11:48:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/09/27/instant-access-to-your-shell-init-file</id>
    <content type="html"><![CDATA[<p>A while ago I showed you a way to <a href="http://emacsredux.com/blog/2013/05/18/instant-access-to-init-dot-el/">instantly edit your Emacs init file</a>. Today
we&#8217;ll adapt the original idea for shell init files like <code>.bashrc</code> and <code>.zshrc</code>. The code required is fairly short and simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">find-shell-init-file</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Edit the shell init file in another window.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">shell</span> <span class="p">(</span><span class="nb">car</span> <span class="p">(</span><span class="nb">reverse</span> <span class="p">(</span><span class="nv">split-string</span> <span class="p">(</span><span class="nv">getenv</span> <span class="s">&quot;SHELL&quot;</span><span class="p">)</span> <span class="s">&quot;/&quot;</span><span class="p">))))</span>
</span><span class='line'>         <span class="p">(</span><span class="nv">shell-init-file</span> <span class="p">(</span><span class="nb">cond</span>
</span><span class='line'>                           <span class="p">((</span><span class="nb">string-equal</span> <span class="s">&quot;zsh&quot;</span> <span class="nv">shell</span><span class="p">)</span> <span class="s">&quot;.zshrc&quot;</span><span class="p">)</span>
</span><span class='line'>                           <span class="p">((</span><span class="nb">string-equal</span> <span class="s">&quot;bash&quot;</span> <span class="nv">shell</span><span class="p">)</span> <span class="s">&quot;.bashrc&quot;</span><span class="p">)</span>
</span><span class='line'>                           <span class="p">(</span><span class="no">t</span> <span class="p">(</span><span class="nb">error</span> <span class="s">&quot;Unknown shell&quot;</span><span class="p">)))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">find-file-other-window</span> <span class="p">(</span><span class="nv">expand-file-name</span> <span class="nv">shell-init-file</span> <span class="p">(</span><span class="nv">getenv</span> <span class="s">&quot;HOME&quot;</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The shell init file is deduced from your <code>SHELL</code> env variable. While there are different shell init files for most shell (e.g. <code>.bash_profile</code>, <code>.zshenv</code>, <code>.zprofile</code>), here we&#8217;re assuming you&#8217;re using the most commonly used files. <code>find-file-other-window</code> will
open the file in a window adjacent to the one you&#8217;re currently in.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c S&quot;</span><span class="p">)</span> <span class="ss">&#39;find-shell-init-file</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>find-shell-init-file</code> is available in
<a href="https://github.com/bbatsov/prelude">Prelude</a>(but with a <code>prelude-</code>
prefix).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Removing/Altering key bindings from minor mode keymaps]]></title>
    <link href="http://emacsredux.com/blog/2013/09/25/removing-key-bindings-from-minor-mode-keymaps/"/>
    <updated>2013-09-25T12:26:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/09/25/removing-key-bindings-from-minor-mode-keymaps</id>
    <content type="html"><![CDATA[<p>Often minor modes don&#8217;t respect standard keybinding conventions and
use some user reserved keys (like <code>C-c a</code>). Occasionally two minor
modes would have conflicting keybindings or a minor mode would
keybindings conflicting with a major mode. I guess you can imagine
similar problems. Dealing with them is fairly straight-forward - we
have to either unbind or rebind the offending binding:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;; remove keybinding</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">minor-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c c&quot;</span><span class="p">)</span> <span class="no">nil</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; change keybinding</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">minor-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c c&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c C-c&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generally speaking you can use <code>define-key</code> to alter the keymap of a
major mode as well, but those are rarely offenders when it comes to
picking appropriate keybindings for their keymaps.</p>

<p>Normally you&#8217;d want to invoke the above code right after the related
minor (or major) mode is loaded:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">eval-after-load</span> <span class="s">&quot;minor-mode&quot;</span>
</span><span class='line'>  <span class="o">&#39;</span><span class="p">(</span><span class="nv">define-key</span> <span class="nv">minor-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c c&quot;</span><span class="p">)</span> <span class="no">nil</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Making a minor mode have different keymaps in different major modes is
tricky, but possible. Here&#8217;s an example that disables some keybindings
in the minor <code>prelude-mode</code>, that are conflicting with the major
<code>org-mode</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">my-org-mode-hook</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">oldmap</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nb">assoc</span> <span class="ss">&#39;prelude-mode</span> <span class="nv">minor-mode-map-alist</span><span class="p">)))</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">newmap</span> <span class="p">(</span><span class="nv">make-sparse-keymap</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">set-keymap-parent</span> <span class="nv">newmap</span> <span class="nv">oldmap</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">define-key</span> <span class="nv">newmap</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c +&quot;</span><span class="p">)</span> <span class="no">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">define-key</span> <span class="nv">newmap</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c -&quot;</span><span class="p">)</span> <span class="no">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">make-local-variable</span> <span class="ss">&#39;minor-mode-overriding-map-alist</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">push</span> <span class="o">`</span><span class="p">(</span><span class="nv">prelude-mode</span> <span class="o">.</span> <span class="o">,</span><span class="nv">newmap</span><span class="p">)</span> <span class="nv">minor-mode-overriding-map-alist</span><span class="p">))</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;org-mode-hook</span> <span class="ss">&#39;my-org-mode-hook</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dired Jump]]></title>
    <link href="http://emacsredux.com/blog/2013/09/24/dired-jump/"/>
    <updated>2013-09-24T17:53:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/09/24/dired-jump</id>
    <content type="html"><![CDATA[<p>Most Emacs users know that they can start <code>dired</code> (Emacs&#8217;s file
browser) with <code>M-x dired</code> or <code>C-x d</code>. That would display a prompt in
the minibuffer asking which directory to open with <code>dired</code> (the
current directory will be suggested as a default).</p>

<p>More often than not you&#8217;ll probably want <code>dired</code> to display the
directory of file you&#8217;re currently editing. You might even want to
have the cursor positioned over that very same file in the <code>dired</code>
buffer. There&#8217;s a cool command that does exactly that -
<code>dired-jump</code>. To use it you have to first load the built-in library
<code>dired-x</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;dired-x</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can run the command with <code>C-x C-j</code> (<code>M-x dired-jump</code>). No prompts,
no wasted time. You&#8217;re instantly teleported to the currently edited
file&#8217;s position in a <code>dired</code> buffer.</p>

<p>This command works out-of-the-box in
<a href="https://github.com/bbatsov/prelude">Prelude</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A proper replacement for flet]]></title>
    <link href="http://emacsredux.com/blog/2013/09/05/a-proper-replacement-for-flet/"/>
    <updated>2013-09-05T14:38:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/09/05/a-proper-replacement-for-flet</id>
    <content type="html"><![CDATA[<p>The popular <code>flet</code> macro was deprecated in Emacs 24.3 and replaced with two similar macros - <code>cl-flet</code> and <code>cl-letf</code>.</p>

<p><code>flet</code> was used to temporarily override function definitions.
This was an analogue of a dynamically scoped <code>let</code> that operates on the function
cell of symbols rather than their value cell.</p>

<p>The ability to dynamically rebind a functions was very useful for stubbing purposes in unit tests (you do write unit tests, don&#8217;t you?).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="k">flet</span> <span class="p">((</span><span class="nv">projectile-project-root</span> <span class="p">()</span> <span class="s">&quot;/path/to/project&quot;</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nv">projectile-project-name</span> <span class="p">()</span> <span class="s">&quot;project&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="o">...</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>projectile-project-root</code> and <code>projectile-project-name</code> are impure
functions (they depend on the current directory) and testing functions
that use them internally would normally be problematic. However, <code>flet</code>
gives us the ability to override their actual definitions in our
tests. <code>flet</code>&#8217;s official replacement <code>cl-flet</code> is lexically bound and this is no longer possible
with it.</p>

<p>Fortunately <a href="https://github.com/nicferrier">Nic Ferrier</a> created a
true drop-in <code>flet</code> replacement (with some extra magic baked in) -
<a href="https://github.com/nicferrier/emacs-noflet">noflet</a>. If you&#8217;re missing <code>flet</code>, I suggest you to give <code>noflet</code> a try.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Version checks]]></title>
    <link href="http://emacsredux.com/blog/2013/09/05/version-checks/"/>
    <updated>2013-09-05T14:25:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/09/05/version-checks</id>
    <content type="html"><![CDATA[<p>Often the code you&#8217;re writing would be depending on the version of
some external tool (say <code>git</code>) or Emacs itself. Version checks in Emacs are pretty
easy - just use the built-in functions <code>version=</code>, <code>version&lt;=</code> or <code>version=</code>.</p>

<p>Let&#8217;s illustrate this with an
example. <a href="https://github.com/bbatsov/prelude">Prelude</a> requires at
least GNU Emacs 24.1 to run and on startup it performs the following
check:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">version&lt;</span> <span class="nv">emacs-version</span> <span class="s">&quot;24.1&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">error</span> <span class="s">&quot;Prelude requires at least GNU Emacs 24.1&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple and effective. The <code>version</code> functions are pretty smart and recognize most popular version formats correctly.
Note that version string &#8220;1&#8221; is equal to &#8220;1.0&#8221;, &#8220;1.0.0&#8221;, &#8220;1.0.0.0&#8221;,
etc.  That is, the trailing &#8220;.0&#8221;s are insignificant.  Also, version
string &#8220;1&#8221; is higher (newer) than &#8220;1pre&#8221;, which is higher than &#8220;1beta&#8221;,
which is higher than &#8220;1alpha&#8221;.  Also, &#8220;-CVS&#8221; and &#8220;-NNN&#8221; are treated
as alpha versions.</p>

<p>If you&#8217;re writing an Emacs package you can also add an explicit Emacs version dependency in the packge metadata:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;; Package-Requires: ((emacs &quot;24.1&quot;))</span>
</span></code></pre></td></tr></table></div></figure>


<p>That way users of older Emacsen would not see a version of your package targeting newer Emacsen.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Search Youtube]]></title>
    <link href="http://emacsredux.com/blog/2013/08/26/search-youtube/"/>
    <updated>2013-08-26T17:59:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/08/26/search-youtube</id>
    <content type="html"><![CDATA[<p>Some time ago I showed you how to do
<a href="http://emacsredux.com/blog/2013/03/28/google/">Google queries from Emacs</a>. The
approach used in that articles is pretty generic and can be used for
the creation of various similar commands. Let&#8217;s create a command that
searches in YouTube:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">youtube</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Search YouTube with a query or region if any.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">browse-url</span>
</span><span class='line'>   <span class="p">(</span><span class="nv">concat</span>
</span><span class='line'>    <span class="s">&quot;http://www.youtube.com/results?search_query=&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">url-hexify-string</span> <span class="p">(</span><span class="k">if</span> <span class="nv">mark-active</span>
</span><span class='line'>                           <span class="p">(</span><span class="nv">buffer-substring</span> <span class="p">(</span><span class="nv">region-beginning</span><span class="p">)</span> <span class="p">(</span><span class="nv">region-end</span><span class="p">))</span>
</span><span class='line'>                         <span class="p">(</span><span class="nv">read-string</span> <span class="s">&quot;Search YouTube: &quot;</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This command will display the query results in your default browser.</p>

<p>I&#8217;d suggest binding the command to <code>C-c y</code> if you plan to use it regularly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c y&quot;</span><span class="p">)</span> <span class="ss">&#39;youtube</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>youtube</code> is available in
<a href="https://github.com/bbatsov/prelude">Prelude</a>(but with a <code>prelude-</code>
prefix).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Color Themes: Redux]]></title>
    <link href="http://emacsredux.com/blog/2013/08/21/color-themes-redux/"/>
    <updated>2013-08-21T12:36:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/08/21/color-themes-redux</id>
    <content type="html"><![CDATA[<h2>Prelude</h2>

<p><em>This is a slightly refreshed version of an
 <a href="http://batsov.com/articles/2012/02/19/color-theming-in-emacs-reloaded/">article originally published on my personal blog</a></em>.</p>

<p>If there is something that people love as much as tweaking their
editing configurations it&#8217;s probably the selection of color themes. A
good color theme can make your work much more pleasant and a bad one
that literally impair your vision. It&#8217;s a fact of life that I&#8217;m a firm
supporter of low-contrast color themes with dark backgrounds - I find
them easy on the eyes and I feel that they don&#8217;t strain the eyes as
much as most themes. I&#8217;ve even ported a couple of popular themes to
Emacs - <a href="https://github.com/bbatsov/zenburn-emacs">Zenburn</a> and
<a href="https://github.com/bbatsov/solarized-emacs">Solarized</a>.</p>

<p>In this short article we&#8217;ll see how color theming has changed in Emacs
24 and I&#8217;ll share with you a few tips on theme creation and
distribution.</p>

<!--more-->


<h2>Color Theming in Emacs 24</h2>

<h3>Theme Engines</h3>

<p>Prior to Emacs 24 the most popular way to incorporate custom color
themes into Emacs was the
<a href="http://www.emacswiki.org/emacs/ColorTheme">color-theme package</a>. While
it usually got the job done it had some problems that I won&#8217;t be
discussing here and more importantly - it&#8217;s a third-party package,
that&#8217;s not part of Emacs proper.</p>

<p><a href="http://batsov.com/articles/2011/08/19/a-peek-at-emacs24/">Emacs 24</a>
finally introduced a new standard way of dealing with color themes
(based on Emacs&#8217;s built-in customize facility). While it doesn&#8217;t have
a proper name (as far as I know) it&#8217;s commonly referred to as the
<code>deftheme</code> facility, since <code>deftheme</code> is the name of the macro you&#8217;d
use to create such a theme. (<code>deftheme</code> has actually been around
since Emacs 23, but it was heavily improved in Emacs 24)</p>

<h3>Using Themes</h3>

<p>Emacs 24 comes with a selection of built-in themes that you can choose
from, so you&#8217;re no longer bound to the default theme (which I find
quite ugly). To choose a new theme just do a <code>M-x load-theme</code> (tab
completion is available for the names of the available themes). At
this point you can give the command a try with the <code>tango</code> theme. If you
like a theme so much that you&#8217;d want to use it all the time you can
put in your Emacs configuration (<code>.emacs</code> or <code>init.el</code> for instance) like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">load-theme</span> <span class="ss">&#39;theme-name</span> <span class="no">t</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;d like to return to the default theme just do a <code>M-x disable-theme</code>.</p>

<h3>Creating Themes</h3>

<p>How do you create a <code>deftheme</code> theme? Quite simply actually - just do
a <strong>M-x customize-create-theme</strong>. You&#8217;ll be presented with an UI
prompting you for a theme name, description and faces. After you save
the theme a file called <code>name-theme.el</code> will be written on your
filesystem. Here&#8217;s its skeleton:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">deftheme</span> <span class="nv">demo</span>
</span><span class='line'>  <span class="s">&quot;Demo theme&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">custom-theme-set-faces</span>
</span><span class='line'> <span class="ss">&#39;demo</span>
</span><span class='line'> <span class="c1">;;; list of custom faces</span>
</span><span class='line'> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">provide-theme</span> <span class="ss">&#39;demo</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Personally I dislike customize a lot, so when I needed to create an
Emacs 24 theme for the first time I just opened the source code of
the built-in <code>tango</code> theme and used it as a reference.</p>

<p>Once you&#8217;ve created the new theme you&#8217;ll have to drop it in a folder
that&#8217;s on the <code>custom-theme-load-path</code>. I&#8217;d suggest the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;custom-theme-load-path</span> <span class="s">&quot;~/.emacs.d/themes&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;re an <a href="https://github.com/bbatsov/prelude">Emacs Prelude</a> user
you&#8217;re already covered. This folder exists and is automatically added
to <code>custom-theme-load-path</code> by Prelude, so all you have to do is drop
there the themes you&#8217;d want to try out. Prelude also uses the
<strong>Zenburn</strong> theme by default.</p>

<p><img src="http://emacsredux.com/images/articles/zenburn_real.png"></p>

<p>You may find the
<a href="http://julien.danjou.info/software/rainbow-mode">rainbow-mode</a> useful
when developing color themes. If fontifies strings that represent
color codes according to those colors. The mode is known to be a great
addition to css-mode, but I find it very helpful with color theme
development as well. It&#8217;s also included (and enabled) in Prelude by
default. Here you can see it in action.</p>

<p><img src="http://emacsredux.com/images/articles/rainbow-mode.png"></p>

<p>I&#8217;d also advise you follow the proper naming convention
<code>name-theme.el</code> so that it&#8217;s apparent that your theme is <code>deftheme</code>
compatible.</p>

<p>Oh, and one more thing - porting themes from <code>color-theme</code> to
<code>deftheme</code> is really simple (just have a look at the old and the new
version of Zenburn in its repo), so you should really consider porting
all the themes you maintain to <code>deftheme</code>. These days most of the
popular themes are <code>deftheme</code> only, but I guess you might still
stumble on some theme that&#8217;s <code>color-theme</code> only.</p>

<h3>Installing Additional Themes</h3>

<p>The Emacs package manager <code>package.el</code> (formerly known as ELPA) is
gaining a lot of popularity lately and the community repos
<a href="http://melpa.milkbox.net/">MELPA</a> and
<a href="http://marmalade-repo.org/">Marmalade</a> already house <strong>many</strong> Emacs
24 themes that you can install from there. Assuming you&#8217;re using one
of the repos you can install <code>zenburn</code> like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="nv">M-x</span> <span class="nv">package-install</span> <span class="nv">RET</span> <span class="nv">zenburn-theme</span>
</span></code></pre></td></tr></table></div></figure>


<p>After it&#8217;s installed you can activate it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="nv">M-x</span> <span class="nv">load-theme</span> <span class="nv">RET</span> <span class="nv">zenburn</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Making Themes Package.el Friendly</h3>

<p>If you&#8217;re developing a theme that you&#8217;d like to submit to MELPA &amp;
Marmalade it&#8217;s imperative that the theme modifies the
<code>custom-theme-load-path</code> in an <code>autoload</code> - otherwise it won&#8217;t be of
much use. Add the following snippet (or something similar) before the
<code>provide-theme</code> line if your custom theme:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;;;###autoload</span>
</span><span class='line'><span class="p">(</span><span class="nb">when</span> <span class="nv">load-file-name</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;custom-theme-load-path</span>
</span><span class='line'>               <span class="p">(</span><span class="nv">file-name-as-directory</span> <span class="p">(</span><span class="nv">file-name-directory</span> <span class="nv">load-file-name</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>A note for OSX users</h3>

<p>For color themes to be rendered correctly you need to build your Emacs with
<code>srbg</code> support. If you&#8217;re a <strong>homebrew</strong> user this means you have to
install Emacs like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="nv">brew</span> <span class="nv">install</span> <span class="nv">emacs</span> <span class="nv">--cocoa</span> <span class="nv">--srgb</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Emacs from <a href="http://emacsformacosx.com/">Emacs for MacOS X</a> is
built without it and I would not recommend you using it.</p>

<p>Here&#8217;s how Zenburn looks with <code>srgb</code> support.</p>

<p><img src="http://emacsredux.com/images/articles/zenburn_real.png"></p>

<p>And this is how it looks without it.</p>

<p><img src="http://emacsredux.com/images/articles/zenburn.png"></p>

<p>Some colors look lighter and a bit washed out without <code>srgb</code>.</p>

<h1>Epilogue</h1>

<p>Color theming in Emacs has never been easier.</p>

<p>Try many of the excellent themes available on MELPA &amp; Marmalade!
Develop new themes &amp; share them with everyone!
Port themes from <code>color-theme</code> to <code>deftheme</code> so we can finally say
goodbye to <code>color-theme</code>!</p>
]]></content>
  </entry>
  
</feed>
