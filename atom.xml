<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Emacs Redux]]></title>
  <link href="http://emacsredux.com/atom.xml" rel="self"/>
  <link href="http://emacsredux.com/"/>
  <updated>2013-10-01T18:31:33+03:00</updated>
  <id>http://emacsredux.com/</id>
  <author>
    <name><![CDATA[Bozhidar Batsov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Instant access to your shell init file]]></title>
    <link href="http://emacsredux.com/blog/2013/09/27/instant-access-to-your-shell-init-file/"/>
    <updated>2013-09-27T11:48:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/09/27/instant-access-to-your-shell-init-file</id>
    <content type="html"><![CDATA[<p>A while ago I showed you a way to <a href="http://emacsredux.com/blog/2013/05/18/instant-access-to-init-dot-el/">instantly edit your Emacs init file</a>. Today
we&#8217;ll adapt the original idea for shell init files like <code>.bashrc</code> and <code>.zshrc</code>. The code required is fairly short and simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">find-shell-init-file</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Edit the shell init file in another window.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">shell</span> <span class="p">(</span><span class="nb">car</span> <span class="p">(</span><span class="nb">reverse</span> <span class="p">(</span><span class="nv">split-string</span> <span class="p">(</span><span class="nv">getenv</span> <span class="s">&quot;SHELL&quot;</span><span class="p">)</span> <span class="s">&quot;/&quot;</span><span class="p">))))</span>
</span><span class='line'>         <span class="p">(</span><span class="nv">shell-init-file</span> <span class="p">(</span><span class="nb">cond</span>
</span><span class='line'>                           <span class="p">((</span><span class="nb">string-equal</span> <span class="s">&quot;zsh&quot;</span> <span class="nv">shell</span><span class="p">)</span> <span class="s">&quot;.zshrc&quot;</span><span class="p">)</span>
</span><span class='line'>                           <span class="p">((</span><span class="nb">string-equal</span> <span class="s">&quot;bash&quot;</span> <span class="nv">shell</span><span class="p">)</span> <span class="s">&quot;.bashrc&quot;</span><span class="p">)</span>
</span><span class='line'>                           <span class="p">(</span><span class="no">t</span> <span class="p">(</span><span class="nb">error</span> <span class="s">&quot;Unknown shell&quot;</span><span class="p">)))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">find-file-other-window</span> <span class="p">(</span><span class="nv">expand-file-name</span> <span class="nv">shell-init-file</span> <span class="p">(</span><span class="nv">getenv</span> <span class="s">&quot;HOME&quot;</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The shell init file is deduced from your <code>SHELL</code> env variable. While there are different shell init files for most shell (e.g. <code>.bash_profile</code>, <code>.zshenv</code>, <code>.zprofile</code>), here we&#8217;re assuming you&#8217;re using the most commonly used files. <code>find-file-other-window</code> will
open the file in a window adjacent to the one you&#8217;re currently in.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c S&quot;</span><span class="p">)</span> <span class="ss">&#39;find-shell-init-file</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>find-shell-init-file</code> is available in
<a href="https://github.com/bbatsov/prelude">Prelude</a>(but with a <code>prelude-</code>
prefix).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Removing/Altering key bindings from minor mode keymaps]]></title>
    <link href="http://emacsredux.com/blog/2013/09/25/removing-key-bindings-from-minor-mode-keymaps/"/>
    <updated>2013-09-25T12:26:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/09/25/removing-key-bindings-from-minor-mode-keymaps</id>
    <content type="html"><![CDATA[<p>Often minor modes don&#8217;t respect standard keybinding conventions and
use some user reserved keys (like <code>C-c a</code>). Occasionally two minor
modes would have conflicting keybindings or a minor mode would
keybindings conflicting with a major mode. I guess you can imagine
similar problems. Dealing with them is fairly straight-forward - we
have to either unbind or rebind the offending binding:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;; remove keybinding</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">minor-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c c&quot;</span><span class="p">)</span> <span class="no">nil</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; change keybinding</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">minor-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c c&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c C-c&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generally speaking you can use <code>define-key</code> to alter the keymap of a
major mode as well, but those are rarely offenders when it comes to
picking appropriate keybindings for their keymaps.</p>

<p>Normally you&#8217;d want to invoke the above code right after the related
minor (or major) mode is loaded:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">eval-after-load</span> <span class="s">&quot;minor-mode&quot;</span>
</span><span class='line'>  <span class="o">&#39;</span><span class="p">(</span><span class="nv">define-key</span> <span class="nv">minor-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c c&quot;</span><span class="p">)</span> <span class="no">nil</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Making a minor mode have different keymaps in different major modes is
tricky, but possible. Here&#8217;s an example that disables some keybindings
in the minor <code>prelude-mode</code>, that are conflicting with the major
<code>org-mode</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">my-org-mode-hook</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">oldmap</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nb">assoc</span> <span class="ss">&#39;prelude-mode</span> <span class="nv">minor-mode-map-alist</span><span class="p">)))</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">newmap</span> <span class="p">(</span><span class="nv">make-sparse-keymap</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">set-keymap-parent</span> <span class="nv">newmap</span> <span class="nv">oldmap</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">define-key</span> <span class="nv">newmap</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c +&quot;</span><span class="p">)</span> <span class="no">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">define-key</span> <span class="nv">newmap</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c -&quot;</span><span class="p">)</span> <span class="no">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">make-local-variable</span> <span class="ss">&#39;minor-mode-overriding-map-alist</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">push</span> <span class="o">`</span><span class="p">(</span><span class="nv">prelude-mode</span> <span class="o">.</span> <span class="o">,</span><span class="nv">newmap</span><span class="p">)</span> <span class="nv">minor-mode-overriding-map-alist</span><span class="p">))</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;org-mode-hook</span> <span class="ss">&#39;my-org-mode-hook</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dired Jump]]></title>
    <link href="http://emacsredux.com/blog/2013/09/24/dired-jump/"/>
    <updated>2013-09-24T17:53:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/09/24/dired-jump</id>
    <content type="html"><![CDATA[<p>Most Emacs users know that they can start <code>dired</code> (Emacs&#8217;s file
browser) with <code>M-x dired</code> or <code>C-x d</code>. That would display a prompt in
the minibuffer asking which directory to open with <code>dired</code> (the
current directory will be suggested as a default).</p>

<p>More often than not you&#8217;ll probably want <code>dired</code> to display the
directory of file you&#8217;re currently editing. You might even want to
have the cursor positioned over that very same file in the <code>dired</code>
buffer. There&#8217;s a cool command that does exactly that -
<code>dired-jump</code>. To use it you have to first load the built-in library
<code>dired-x</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;dired-x</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can run the command with <code>C-x C-j</code> (<code>M-x dired-jump</code>). No prompts,
no wasted time. You&#8217;re instantly teleported to the currently edited
file&#8217;s position in a <code>dired</code> buffer.</p>

<p>This command works out-of-the-box in
<a href="https://github.com/bbatsov/prelude">Prelude</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A proper replacement for flet]]></title>
    <link href="http://emacsredux.com/blog/2013/09/05/a-proper-replacement-for-flet/"/>
    <updated>2013-09-05T14:38:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/09/05/a-proper-replacement-for-flet</id>
    <content type="html"><![CDATA[<p>The popular <code>flet</code> macro was deprecated in Emacs 24.3 and replaced with two similar macros - <code>cl-flet</code> and <code>cl-letf</code>.</p>

<p><code>flet</code> was used to temporarily override function definitions.
This was an analogue of a dynamically scoped <code>let</code> that operates on the function
cell of symbols rather than their value cell.</p>

<p>The ability to dynamically rebind a functions was very useful for stubbing purposes in unit tests (you do write unit tests, don&#8217;t you?).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="k">flet</span> <span class="p">((</span><span class="nv">projectile-project-root</span> <span class="p">()</span> <span class="s">&quot;/path/to/project&quot;</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nv">projectile-project-name</span> <span class="p">()</span> <span class="s">&quot;project&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="o">...</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>projectile-project-root</code> and <code>projectile-project-name</code> are impure
functions (they depend on the current directory) and testing functions
that use them internally would normally be problematic. However, <code>flet</code>
gives us the ability to override their actual definitions in our
tests. <code>flet</code>&#8217;s official replacement <code>cl-flet</code> is lexically bound and this is no longer possible
with it.</p>

<p>Fortunately <a href="https://github.com/nicferrier">Nic Ferrier</a> created a
true drop-in <code>flet</code> replacement (with some extra magic baked in) -
<a href="https://github.com/nicferrier/emacs-noflet">noflet</a>. If you&#8217;re missing <code>flet</code>, I suggest you to give <code>noflet</code> a try.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Version checks]]></title>
    <link href="http://emacsredux.com/blog/2013/09/05/version-checks/"/>
    <updated>2013-09-05T14:25:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/09/05/version-checks</id>
    <content type="html"><![CDATA[<p>Often the code you&#8217;re writing would be depending on the version of
some external tool (say <code>git</code>) or Emacs itself. Version checks in Emacs are pretty
easy - just use the built-in functions <code>version=</code>, <code>version&lt;=</code> or <code>version=</code>.</p>

<p>Let&#8217;s illustrate this with an
example. <a href="https://github.com/bbatsov/prelude">Prelude</a> requires at
least GNU Emacs 24.1 to run and on startup it performs the following
check:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">version&lt;</span> <span class="nv">emacs-version</span> <span class="s">&quot;24.1&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">error</span> <span class="s">&quot;Prelude requires at least GNU Emacs 24.1&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple and effective. The <code>version</code> functions are pretty smart and recognize most popular version formats correctly.
Note that version string &#8220;1&#8221; is equal to &#8220;1.0&#8221;, &#8220;1.0.0&#8221;, &#8220;1.0.0.0&#8221;,
etc.  That is, the trailing &#8220;.0&#8221;s are insignificant.  Also, version
string &#8220;1&#8221; is higher (newer) than &#8220;1pre&#8221;, which is higher than &#8220;1beta&#8221;,
which is higher than &#8220;1alpha&#8221;.  Also, &#8220;-CVS&#8221; and &#8220;-NNN&#8221; are treated
as alpha versions.</p>

<p>If you&#8217;re writing an Emacs package you can also add an explicit Emacs version dependency in the packge metadata:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;; Package-Requires: ((emacs &quot;24.1&quot;))</span>
</span></code></pre></td></tr></table></div></figure>


<p>That way users of older Emacsen would not see a version of your package targeting newer Emacsen.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Search Youtube]]></title>
    <link href="http://emacsredux.com/blog/2013/08/26/search-youtube/"/>
    <updated>2013-08-26T17:59:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/08/26/search-youtube</id>
    <content type="html"><![CDATA[<p>Some time ago I showed you how to do
<a href="http://emacsredux.com/blog/2013/03/28/google/">Google queries from Emacs</a>. The
approach used in that articles is pretty generic and can be used for
the creation of various similar commands. Let&#8217;s create a command that
searches in YouTube:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">youtube</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Search YouTube with a query or region if any.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">browse-url</span>
</span><span class='line'>   <span class="p">(</span><span class="nv">concat</span>
</span><span class='line'>    <span class="s">&quot;http://www.youtube.com/results?search_query=&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">url-hexify-string</span> <span class="p">(</span><span class="k">if</span> <span class="nv">mark-active</span>
</span><span class='line'>                           <span class="p">(</span><span class="nv">buffer-substring</span> <span class="p">(</span><span class="nv">region-beginning</span><span class="p">)</span> <span class="p">(</span><span class="nv">region-end</span><span class="p">))</span>
</span><span class='line'>                         <span class="p">(</span><span class="nv">read-string</span> <span class="s">&quot;Search YouTube: &quot;</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This command will display the query results in your default browser.</p>

<p>I&#8217;d suggest binding the command to <code>C-c y</code> if you plan to use it regularly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c y&quot;</span><span class="p">)</span> <span class="ss">&#39;youtube</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>youtube</code> is available in
<a href="https://github.com/bbatsov/prelude">Prelude</a>(but with a <code>prelude-</code>
prefix).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Color Themes: Redux]]></title>
    <link href="http://emacsredux.com/blog/2013/08/21/color-themes-redux/"/>
    <updated>2013-08-21T12:36:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/08/21/color-themes-redux</id>
    <content type="html"><![CDATA[<h2>Prelude</h2>

<p><em>This is a slightly refreshed version of an
 <a href="http://batsov.com/articles/2012/02/19/color-theming-in-emacs-reloaded/">article originally published on my personal blog</a></em>.</p>

<p>If there is something that people love as much as tweaking their
editing configurations it&#8217;s probably the selection of color themes. A
good color theme can make your work much more pleasant and a bad one
that literally impair your vision. It&#8217;s a fact of life that I&#8217;m a firm
supporter of low-contrast color themes with dark backgrounds - I find
them easy on the eyes and I feel that they don&#8217;t strain the eyes as
much as most themes. I&#8217;ve even ported a couple of popular themes to
Emacs - <a href="https://github.com/bbatsov/zenburn-emacs">Zenburn</a> and
<a href="https://github.com/bbatsov/solarized-emacs">Solarized</a>.</p>

<p>In this short article we&#8217;ll see how color theming has changed in Emacs
24 and I&#8217;ll share with you a few tips on theme creation and
distribution.</p>

<!--more-->


<h2>Color Theming in Emacs 24</h2>

<h3>Theme Engines</h3>

<p>Prior to Emacs 24 the most popular way to incorporate custom color
themes into Emacs was the
<a href="http://www.emacswiki.org/emacs/ColorTheme">color-theme package</a>. While
it usually got the job done it had some problems that I won&#8217;t be
discussing here and more importantly - it&#8217;s a third-party package,
that&#8217;s not part of Emacs proper.</p>

<p><a href="http://batsov.com/articles/2011/08/19/a-peek-at-emacs24/">Emacs 24</a>
finally introduced a new standard way of dealing with color themes
(based on Emacs&#8217;s built-in customize facility). While it doesn&#8217;t have
a proper name (as far as I know) it&#8217;s commonly referred to as the
<code>deftheme</code> facility, since <code>deftheme</code> is the name of the macro you&#8217;d
use to create such a theme. (<code>deftheme</code> has actually been around
since Emacs 23, but it was heavily improved in Emacs 24)</p>

<h3>Using Themes</h3>

<p>Emacs 24 comes with a selection of built-in themes that you can choose
from, so you&#8217;re no longer bound to the default theme (which I find
quite ugly). To choose a new theme just do a <code>M-x load-theme</code> (tab
completion is available for the names of the available themes). At
this point you can give the command a try with the <code>tango</code> theme. If you
like a theme so much that you&#8217;d want to use it all the time you can
put in your Emacs configuration (<code>.emacs</code> or <code>init.el</code> for instance) like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">load-theme</span> <span class="ss">&#39;theme-name</span> <span class="no">t</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;d like to return to the default theme just do a <code>M-x disable-theme</code>.</p>

<h3>Creating Themes</h3>

<p>How do you create a <code>deftheme</code> theme? Quite simply actually - just do
a <strong>M-x customize-create-theme</strong>. You&#8217;ll be presented with an UI
prompting you for a theme name, description and faces. After you save
the theme a file called <code>name-theme.el</code> will be written on your
filesystem. Here&#8217;s its skeleton:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">deftheme</span> <span class="nv">demo</span>
</span><span class='line'>  <span class="s">&quot;Demo theme&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">custom-theme-set-faces</span>
</span><span class='line'> <span class="ss">&#39;demo</span>
</span><span class='line'> <span class="c1">;;; list of custom faces</span>
</span><span class='line'> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">provide-theme</span> <span class="ss">&#39;demo</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Personally I dislike customize a lot, so when I needed to create an
Emacs 24 theme for the first time I just opened the source code of
the built-in <code>tango</code> theme and used it as a reference.</p>

<p>Once you&#8217;ve created the new theme you&#8217;ll have to drop it in a folder
that&#8217;s on the <code>custom-theme-load-path</code>. I&#8217;d suggest the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;custom-theme-load-path</span> <span class="s">&quot;~/.emacs.d/themes&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;re an <a href="https://github.com/bbatsov/prelude">Emacs Prelude</a> user
you&#8217;re already covered. This folder exists and is automatically added
to <code>custom-theme-load-path</code> by Prelude, so all you have to do is drop
there the themes you&#8217;d want to try out. Prelude also uses the
<strong>Zenburn</strong> theme by default.</p>

<p><img src="http://emacsredux.com/images/articles/zenburn_real.png"></p>

<p>You may find the
<a href="http://julien.danjou.info/software/rainbow-mode">rainbow-mode</a> useful
when developing color themes. If fontifies strings that represent
color codes according to those colors. The mode is known to be a great
addition to css-mode, but I find it very helpful with color theme
development as well. It&#8217;s also included (and enabled) in Prelude by
default. Here you can see it in action.</p>

<p><img src="http://emacsredux.com/images/articles/rainbow-mode.png"></p>

<p>I&#8217;d also advise you follow the proper naming convention
<code>name-theme.el</code> so that it&#8217;s apparent that your theme is <code>deftheme</code>
compatible.</p>

<p>Oh, and one more thing - porting themes from <code>color-theme</code> to
<code>deftheme</code> is really simple (just have a look at the old and the new
version of Zenburn in its repo), so you should really consider porting
all the themes you maintain to <code>deftheme</code>. These days most of the
popular themes are <code>deftheme</code> only, but I guess you might still
stumble on some theme that&#8217;s <code>color-theme</code> only.</p>

<h3>Installing Additional Themes</h3>

<p>The Emacs package manager <code>package.el</code> (formerly known as ELPA) is
gaining a lot of popularity lately and the community repos
<a href="http://melpa.milkbox.net/">MELPA</a> and
<a href="http://marmalade-repo.org/">Marmalade</a> already house <strong>many</strong> Emacs
24 themes that you can install from there. Assuming you&#8217;re using one
of the repos you can install <code>zenburn</code> like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="nv">M-x</span> <span class="nv">package-install</span> <span class="nv">RET</span> <span class="nv">zenburn-theme</span>
</span></code></pre></td></tr></table></div></figure>


<p>After it&#8217;s installed you can activate it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="nv">M-x</span> <span class="nv">load-theme</span> <span class="nv">RET</span> <span class="nv">zenburn</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Making Themes Package.el Friendly</h3>

<p>If you&#8217;re developing a theme that you&#8217;d like to submit to MELPA &amp;
Marmalade it&#8217;s imperative that the theme modifies the
<code>custom-theme-load-path</code> in an <code>autoload</code> - otherwise it won&#8217;t be of
much use. Add the following snippet (or something similar) before the
<code>provide-theme</code> line if your custom theme:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;;;###autoload</span>
</span><span class='line'><span class="p">(</span><span class="nb">when</span> <span class="nv">load-file-name</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;custom-theme-load-path</span>
</span><span class='line'>               <span class="p">(</span><span class="nv">file-name-as-directory</span> <span class="p">(</span><span class="nv">file-name-directory</span> <span class="nv">load-file-name</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>A note for OSX users</h3>

<p>For color themes to be rendered correctly you need to build your Emacs with
<code>srbg</code> support. If you&#8217;re a <strong>homebrew</strong> user this means you have to
install Emacs like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="nv">brew</span> <span class="nv">install</span> <span class="nv">emacs</span> <span class="nv">--cocoa</span> <span class="nv">--srgb</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Emacs from <a href="http://emacsformacosx.com/">Emacs for MacOS X</a> is
built without it and I would not recommend you using it.</p>

<p>Here&#8217;s how Zenburn looks with <code>srgb</code> support.</p>

<p><img src="http://emacsredux.com/images/articles/zenburn_real.png"></p>

<p>And this is how it looks without it.</p>

<p><img src="http://emacsredux.com/images/articles/zenburn.png"></p>

<p>Some colors look lighter and a bit washed out without <code>srgb</code>.</p>

<h1>Epilogue</h1>

<p>Color theming in Emacs has never been easier.</p>

<p>Try many of the excellent themes available on MELPA &amp; Marmalade!
Develop new themes &amp; share them with everyone!
Port themes from <code>color-theme</code> to <code>deftheme</code> so we can finally say
goodbye to <code>color-theme</code>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Increment and decrement integer at point]]></title>
    <link href="http://emacsredux.com/blog/2013/07/25/increment-and-decrement-integer-at-point/"/>
    <updated>2013-07-25T18:49:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/07/25/increment-and-decrement-integer-at-point</id>
    <content type="html"><![CDATA[<p>While editing you often have to increment or decrement some number
(usually an integer) by some step. Obviously this is trivial when the
number is something like <code>10</code>, but not pretty pleasant when the number
is <code>2343566</code> and you want to increment it by <code>943</code>. Most of the time,
however, you&#8217;ll probably be incrementing or decrementing by 1.</p>

<p>A long time ago I found a bit of code by
<a href="https://github.com/DarwinAwardWinner">Ryan Thompson</a> to help us deal
with such tasks. Here&#8217;s a slightly modified version of the original code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;thingatpt</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">thing-at-point-goto-end-of-integer</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Go to end of integer at point.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">inhibit-changing-match-data</span> <span class="no">t</span><span class="p">))</span>
</span><span class='line'>    <span class="c1">;; Skip over optional sign</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">looking-at</span> <span class="s">&quot;[+-]&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">forward-char</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>    <span class="c1">;; Skip over digits</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">skip-chars-forward</span> <span class="s">&quot;[[:digit:]]&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">;; Check for at least one digit</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nv">looking-back</span> <span class="s">&quot;[[:digit:]]&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">error</span> <span class="s">&quot;No integer here&quot;</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;integer</span> <span class="ss">&#39;beginning-op</span> <span class="ss">&#39;thing-at-point-goto-end-of-integer</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">thing-at-point-goto-beginning-of-integer</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Go to end of integer at point.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">inhibit-changing-match-data</span> <span class="no">t</span><span class="p">))</span>
</span><span class='line'>    <span class="c1">;; Skip backward over digits</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">skip-chars-backward</span> <span class="s">&quot;[[:digit:]]&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">;; Check for digits and optional sign</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nv">looking-at</span> <span class="s">&quot;[+-]?[[:digit:]]&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">error</span> <span class="s">&quot;No integer here&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="c1">;; Skip backward over optional sign</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">looking-back</span> <span class="s">&quot;[+-]&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">backward-char</span> <span class="mi">1</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;integer</span> <span class="ss">&#39;beginning-op</span> <span class="ss">&#39;thing-at-point-goto-beginning-of-integer</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">thing-at-point-bounds-of-integer-at-point</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Get boundaries of integer at point.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">save-excursion</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let</span> <span class="p">(</span><span class="nv">beg</span> <span class="nv">end</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">thing-at-point-goto-beginning-of-integer</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="k">setq</span> <span class="nv">beg</span> <span class="p">(</span><span class="nv">point</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">thing-at-point-goto-end-of-integer</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="k">setq</span> <span class="nv">end</span> <span class="p">(</span><span class="nv">point</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">cons</span> <span class="nv">beg</span> <span class="nv">end</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;integer</span> <span class="ss">&#39;bounds-of-thing-at-point</span> <span class="ss">&#39;thing-at-point-bounds-of-integer-at-point</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">thing-at-point-integer-at-point</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Get integer at point.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">bounds</span> <span class="p">(</span><span class="nv">bounds-of-thing-at-point</span> <span class="ss">&#39;integer</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">string-to-number</span> <span class="p">(</span><span class="nv">buffer-substring</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">bounds</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">bounds</span><span class="p">)))))</span>
</span><span class='line'><span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;integer</span> <span class="ss">&#39;thing-at-point</span> <span class="ss">&#39;thing-at-point-integer-at-point</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">increment-integer-at-point</span> <span class="p">(</span><span class="k">&amp;optional</span> <span class="nv">inc</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Increment integer at point by one.</span>
</span><span class='line'>
</span><span class='line'><span class="s">With numeric prefix arg INC, increment the integer by INC amount.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span> <span class="s">&quot;p&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">inc</span> <span class="p">(</span><span class="nb">or</span> <span class="nv">inc</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">n</span> <span class="p">(</span><span class="nv">thing-at-point</span> <span class="ss">&#39;integer</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">bounds</span> <span class="p">(</span><span class="nv">bounds-of-thing-at-point</span> <span class="ss">&#39;integer</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">delete-region</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">bounds</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">bounds</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">insert</span> <span class="p">(</span><span class="nv">int-to-string</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">n</span> <span class="nv">inc</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">decrement-integer-at-point</span> <span class="p">(</span><span class="k">&amp;optional</span> <span class="nv">dec</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Decrement integer at point by one.</span>
</span><span class='line'>
</span><span class='line'><span class="s">With numeric prefix arg DEC, decrement the integer by DEC amount.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span> <span class="s">&quot;p&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">increment-integer-at-point</span> <span class="p">(</span><span class="nb">-</span> <span class="p">(</span><span class="nb">or</span> <span class="nv">dec</span> <span class="mi">1</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code is based on the popular built-in library <code>thing-at-point</code> and
extends it to make it aware of integer numbers.  The commands
<code>increment-integer-at-point</code> and <code>decrement-integer-at-point</code> operate
with a step of 1 by default, but with a prefix argument you can select
any step you desire. Unlike other similar commands floating in the
Internet, these two handle correctly numbers like <code>-3434</code> and
<code>+343</code>.</p>

<p>I&#8217;d suggest binding these commands to <code>C-c +</code> and <code>C-c -</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c +&quot;</span><span class="p">)</span> <span class="ss">&#39;increment-integer-at-point</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c -&quot;</span><span class="p">)</span> <span class="ss">&#39;decrement-integer-at-point</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both commands are available in
<a href="https://github.com/bbatsov/prelude">Prelude</a>(but with a <code>prelude-</code>
prefix).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Highlight comment annotations]]></title>
    <link href="http://emacsredux.com/blog/2013/07/24/highlight-comment-annotations/"/>
    <updated>2013-07-24T16:15:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/07/24/highlight-comment-annotations</id>
    <content type="html"><![CDATA[<p>Programming code is often filled with comment annotations indicating stuff that should be done in the future.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># REFACTOR: Decouple and clean up this crap.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># crappy code omitted</span>
</span></code></pre></td></tr></table></div></figure>


<p>Normally Emacs doesn&#8217;t highlight such comment annotations, unless
you&#8217;re using some minor mode like
<a href="https://github.com/lewang/fic-mode/blob/master/fic-mode.el">fic-mode</a>. I find such mode overkill given the fact we can cook a pretty decent solution in just about 5 lines of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">font-lock-comment-annotations</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Highlight a bunch of well known comment annotations.</span>
</span><span class='line'>
</span><span class='line'><span class="s">This functions should be added to the hooks of major modes for programming.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">font-lock-add-keywords</span>
</span><span class='line'>   <span class="no">nil</span> <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;\\&lt;\\(FIX\\(ME\\)?\\|TODO\\|OPTIMIZE\\|HACK\\|REFACTOR\\):&quot;</span>
</span><span class='line'>          <span class="mi">1</span> <span class="nv">font-lock-warning-face</span> <span class="no">t</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;prog-mode-hook</span> <span class="ss">&#39;font-lock-comment-annotations</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s all there is to it. This code is not perfect, since it
would highlight <code>FIXME:</code> everywhere in the source code (as opposed to
only in comments), but it&#8217;s extremely highly unlikely that it&#8217;ll
appear outside of the source comments anyways.</p>

<p>As usual <a href="https://github.com/bbatsov/prelude">Prelude</a> users get this
functionally for free out-of-the-box.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make use of the Super key]]></title>
    <link href="http://emacsredux.com/blog/2013/07/17/make-use-of-the-super-key/"/>
    <updated>2013-07-17T16:16:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/07/17/make-use-of-the-super-key</id>
    <content type="html"><![CDATA[<p>Emacs users have a lot of power at their disposal, but in one
department they are always short - the number of available
non-complex keybindings that they can leverage.</p>

<p>Obviously nobody likes pressing keybindings like <code>C-p C-v k</code> (or
something like that). One way to get your hands on some extra
keybindings is to utilize the <code>Super</code> key (it&#8217;s the <code>Windows</code> key on
Win keyboards and the <code>Command</code> key on Mac keyboards (although most
people remap <code>Command</code> to <code>Meta</code> and <code>Option</code> to <code>Super</code>)). One great
thing about <code>Super</code> is that you generally have two of them, which
makes them touch-typing friend. Since almost no packages use those
keys you&#8217;re left with plenty of options.</p>

<p><a href="https://github.com/bbatsov/prelude">Prelude</a> defines a bunch of
global keybindings that use the <code>Super</code> key.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;; make some use of the Super key</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">global-map</span> <span class="nv">[?\s-d]</span> <span class="ss">&#39;projectile-find-dir</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">global-map</span> <span class="nv">[?\s-e]</span> <span class="ss">&#39;er/expand-region</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">global-map</span> <span class="nv">[?\s-f]</span> <span class="ss">&#39;projectile-find-file</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">global-map</span> <span class="nv">[?\s-g]</span> <span class="ss">&#39;projectile-grep</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">global-map</span> <span class="nv">[?\s-j]</span> <span class="ss">&#39;prelude-top-join-line</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">global-map</span> <span class="nv">[?\s-k]</span> <span class="ss">&#39;prelude-kill-whole-line</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">global-map</span> <span class="nv">[?\s-l]</span> <span class="ss">&#39;goto-line</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">global-map</span> <span class="nv">[?\s-m]</span> <span class="ss">&#39;magit-status</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">global-map</span> <span class="nv">[?\s-o]</span> <span class="ss">&#39;prelude-open-line-above</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">global-map</span> <span class="nv">[?\s-w]</span> <span class="ss">&#39;delete-frame</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">global-map</span> <span class="nv">[?\s-x]</span> <span class="ss">&#39;exchange-point-and-mark</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">global-map</span> <span class="nv">[?\s-p]</span> <span class="ss">&#39;projectile-switch-project</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you find pressing <code>Super</code> comfortable obviously you have the
potential to add quite a lot more keybindings to this list.</p>

<p><strong>P.S.</strong> Some keyboards (notably laptop ones) have a <code>Fn</code> key as well
  that&#8217;s also usable in Emacs keybindings. Somewhat funny that key is
  known in Emacs as <code>Hyper</code> (<code>Star Wars</code> fans are undoubtedly adding a
  <strong>Hyper-Space</strong> keybinding to their setups right about now).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advise multiple commands in the same manner]]></title>
    <link href="http://emacsredux.com/blog/2013/07/17/advise-multiple-commands-in-the-same-manner/"/>
    <updated>2013-07-17T16:15:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/07/17/advise-multiple-commands-in-the-same-manner</id>
    <content type="html"><![CDATA[<p>One of the well known features of
<a href="https://github.com/bbatsov/prelude">Prelude</a> is that it saves buffers
with changes in them automatically when you jump between
windows. This is achieved with several simple <code>defadvice</code>s and without
going into many details the advice code for that feature might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;; automatically save buffers associated with files on buffer switch</span>
</span><span class='line'><span class="c1">;; and on windows switch</span>
</span><span class='line'><span class="p">(</span><span class="nv">defadvice</span> <span class="nv">switch-to-buffer</span> <span class="p">(</span><span class="nv">before</span> <span class="nv">switch-to-buffer-auto-save</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">prelude-auto-save</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nv">defadvice</span> <span class="nv">other-window</span> <span class="p">(</span><span class="nv">before</span> <span class="nv">other-window-auto-save</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">prelude-auto-save</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nv">defadvice</span> <span class="nv">windmove-up</span> <span class="p">(</span><span class="nv">before</span> <span class="nv">other-window-auto-save</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">prelude-auto-save</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nv">defadvice</span> <span class="nv">windmove-down</span> <span class="p">(</span><span class="nv">before</span> <span class="nv">other-window-auto-save</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">prelude-auto-save</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nv">defadvice</span> <span class="nv">windmove-left</span> <span class="p">(</span><span class="nv">before</span> <span class="nv">other-window-auto-save</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">prelude-auto-save</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nv">defadvice</span> <span class="nv">windmove-right</span> <span class="p">(</span><span class="nv">before</span> <span class="nv">other-window-auto-save</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">prelude-auto-save</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ouch - that a lot of redundant code! Luckily we can take care of the
redundancy by introducing a macro to generate multiple advices with
the same body:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">defmacro</span> <span class="nv">advise-commands</span> <span class="p">(</span><span class="nv">advice-name</span> <span class="nv">commands</span> <span class="k">&amp;rest</span> <span class="nv">body</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Apply advice named ADVICE-NAME to multiple COMMANDS.</span>
</span><span class='line'>
</span><span class='line'><span class="s">The body of the advice is in BODY.&quot;</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="k">progn</span>
</span><span class='line'>     <span class="o">,@</span><span class="p">(</span><span class="nb">mapcar</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">command</span><span class="p">)</span>
</span><span class='line'>                 <span class="o">`</span><span class="p">(</span><span class="nv">defadvice</span> <span class="o">,</span><span class="nv">command</span> <span class="p">(</span><span class="nv">before</span> <span class="o">,</span><span class="p">(</span><span class="nb">intern</span> <span class="p">(</span><span class="nv">concat</span> <span class="p">(</span><span class="nb">symbol-name</span> <span class="nv">command</span><span class="p">)</span> <span class="s">&quot;-&quot;</span> <span class="nv">advice-name</span><span class="p">))</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>                    <span class="o">,@</span><span class="nv">body</span><span class="p">))</span>
</span><span class='line'>               <span class="nv">commands</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks a bit scary, doesn&#8217;t it? But it allows us to reduce the original code down to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;; advise all window switching functions</span>
</span><span class='line'><span class="p">(</span><span class="nv">advise-commands</span> <span class="s">&quot;auto-save&quot;</span>
</span><span class='line'>                 <span class="p">(</span><span class="nv">switch-to-buffer</span> <span class="nv">other-window</span> <span class="nv">windmove-up</span> <span class="nv">windmove-down</span> <span class="nv">windmove-left</span> <span class="nv">windmove-right</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">(</span><span class="nv">prelude-auto-save</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>macroexpand</code> can show us how the macro gets expanded:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">macroexpand</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">advise-commands</span> <span class="s">&quot;auto-save&quot;</span>
</span><span class='line'>                 <span class="p">(</span><span class="nv">switch-to-buffer</span> <span class="nv">other-window</span> <span class="nv">windmove-up</span> <span class="nv">windmove-down</span> <span class="nv">windmove-left</span> <span class="nv">windmove-right</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">(</span><span class="nv">prelude-auto-save</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">progn</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">defadvice</span> <span class="nv">switch-to-buffer</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">before</span> <span class="nv">switch-to-buffer-auto-save</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">prelude-auto-save</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">defadvice</span> <span class="nv">other-window</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">before</span> <span class="nv">other-window-auto-save</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">prelude-auto-save</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">defadvice</span> <span class="nv">windmove-up</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">before</span> <span class="nv">windmove-up-auto-save</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">prelude-auto-save</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">defadvice</span> <span class="nv">windmove-down</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">before</span> <span class="nv">windmove-down-auto-save</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">prelude-auto-save</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">defadvice</span> <span class="nv">windmove-left</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">before</span> <span class="nv">windmove-left-auto-save</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">prelude-auto-save</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">defadvice</span> <span class="nv">windmove-right</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">before</span> <span class="nv">windmove-right-auto-save</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">prelude-auto-save</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously if we want the macro to be truly universal we should factor
out the hardcoded <code>before</code> and <code>activate</code> <code>defadvice</code> params, but
that&#8217;s beside the point. The point is that when you need to generate
some code Emacs Lisp&#8217;s macros have your back.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go To Column]]></title>
    <link href="http://emacsredux.com/blog/2013/07/09/go-to-column/"/>
    <updated>2013-07-09T16:30:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/07/09/go-to-column</id>
    <content type="html"><![CDATA[<p>Almost every Emacs user knows that <code>M-g M-g</code> and <code>M-g g</code> (both bound to
<code>go-to-line</code>) will take him to the line of his choosing (provided he
knows the number of the target line, of course).</p>

<p>Surprisingly few Emacs users know that there is a similar way to jump
to a column by its number - <code>M-g TAB</code> (bound to
<code>move-to-column</code>). Interactively you cannot jump past the end of the
line you&#8217;re currently on, but you can always cook your own version of
the command to get around that limitation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">go-to-column</span> <span class="p">(</span><span class="nv">column</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span> <span class="s">&quot;nColumn: &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">move-to-column</span> <span class="nv">column</span> <span class="no">t</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s bind that to some keycombo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-g M-c&quot;</span><span class="p">)</span> <span class="ss">&#39;go-to-column</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Locate]]></title>
    <link href="http://emacsredux.com/blog/2013/07/05/locate/"/>
    <updated>2013-07-05T18:58:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/07/05/locate</id>
    <content type="html"><![CDATA[<p><code>locate</code> is one extremely popular Unix command that allows you to
search for files in a pre-built database.</p>

<p>One little know fact is that Emacs provides a wrapper around the
command you can invoke with <code>M-x locate</code>. You&#8217;ll be prompted to enter
a search string and you&#8217;ll be presented with a list of matching
filenames from <code>locate</code>&#8217;s database. Many of <code>dired</code> keybindings are
available in the results buffer (which will be using <code>locate-mode</code> major mode).</p>

<p>If you&#8217;d like you may change the command invoked by Emacs to supply the
results by altering the <code>locate-command</code> variable. Here&#8217;s how you can
start using OSX&#8217;s <code>mdfind</code> (the command-line interface to <code>Spotlight</code>)
instead of <code>locate</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">locate-command</span> <span class="s">&quot;mdfind&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously any command that takes a string argument and returns a list
of files would do here. In all likelihood you&#8217;ll never want to use
anything other than the default <code>locate</code> command, though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boost performance by leveraging byte-compilation]]></title>
    <link href="http://emacsredux.com/blog/2013/06/25/boost-performance-by-leveraging-byte-compilation/"/>
    <updated>2013-06-25T12:49:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/06/25/boost-performance-by-leveraging-byte-compilation</id>
    <content type="html"><![CDATA[<p>Emacs&#8217;s Lisp interpreter is able to interpret two kinds of code:
humanly readable code (stored in files with <code>.el</code> extension) and
machine optimized code (called <code>byte-compiled code</code>), which is not
humanly readable. Byte-compiled code runs faster than humanly readable
code. Java or .NET developers should already be familiar with the
concept of byte-code, since it&#8217;s pretty central on those platforms.</p>

<p>You can transform humanly readable code into byte-compiled code by
running one of the compile commands such as <code>byte-compile-file</code>. The
resulting byte-code is stored into <code>.elc</code> files. One can also
byte-compile Emacs Lisp source files using Emacs in batch mode.</p>

<p>Here&#8217;s how you can compile everything in your <code>.emacs.d</code> folder:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>emacs -batch -f batch-byte-compile ~/.emacs.d/**/*.el</span></code></pre></td></tr></table></div></figure>


<p>Of course we can easily create an Emacs command that does the same thing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">byte-compile-init-dir</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Byte-compile all your dotfiles.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">byte-recompile-directory</span> <span class="nv">user-emacs-directory</span> <span class="mi">0</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>user-emacs-directory</code> is an Emacs variable that points to your init
dir (usually <code>~/.emacs.d</code> on UNIX systems). This command will
recompile even files that were already compiled before (meaning a file
with the same name and the <code>.elc</code> extension instead of <code>.el</code>
existed). You can try the new command with <code>M-x
byte-compile-init-dir</code>.</p>

<p>You have to keep in mind that Emacs will load code from the <code>.elc</code>
files if present alongside the <code>.el</code> files, so you&#8217;ll have to take
steps to ensure you don&#8217;t have stale <code>.elc</code> files lying around. I&#8217;d
suggest the following solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">remove-elc-on-save</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;If you&#39;re saving an elisp file, likely the .elc is no longer valid.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;after-save-hook</span>
</span><span class='line'>            <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span>
</span><span class='line'>              <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">file-exists-p</span> <span class="p">(</span><span class="nv">concat</span> <span class="nv">buffer-file-name</span> <span class="s">&quot;c&quot;</span><span class="p">))</span>
</span><span class='line'>                  <span class="p">(</span><span class="nb">delete-file</span> <span class="p">(</span><span class="nv">concat</span> <span class="nv">buffer-file-name</span> <span class="s">&quot;c&quot;</span><span class="p">))))</span>
</span><span class='line'>            <span class="no">nil</span>
</span><span class='line'>            <span class="no">t</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;emacs-lisp-mode-hook</span> <span class="ss">&#39;remove-elc-on-save</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code will make Emacs delete the <code>some_file.elc</code> file, every time the
<code>some_file.el</code> file in the same folder is saved.</p>

<p>A couple of closing notes:</p>

<ul>
<li><p>If you don&#8217;t have any custom computationally
intensive <code>defuns</code> in your init directory - it probably doesn&#8217;t make sense
to byte-compile it.</p></li>
<li><p>Packages installed via <code>package.el</code> will be automatically byte-compiled during the installation process.</p></li>
</ul>


<p>The code presented here is part of
<a href="https://github.com/bbatsov/prelude">Prelude</a>. As a matter of fact
Prelude will byte-compile itself during the installation process (if
you used the installed script, that is). Prelude will also recompile
itself when <code>M-x prelude-update</code> is invoked.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eval and Replace]]></title>
    <link href="http://emacsredux.com/blog/2013/06/21/eval-and-replace/"/>
    <updated>2013-06-21T12:35:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/06/21/eval-and-replace</id>
    <content type="html"><![CDATA[<p>Sometimes people tend to overlook how well Emacs and Emacs Lisp are
integrated. Basically there is no limit to the places where you can
evaluate a bit of Emacs Lisp and reap the associated benefits. From
time to time I find myself editing something and thinking - &#8220;Hey, it&#8217;d
be really great of I could just insert the result of some Emacs Lisp
expression at point!&#8221; (my thoughts are pretty crazy, right?). Here&#8217;s a
contrived example - I might have to enter somewhere the result of
<code>1984 / 16</code>. I can calculate that manually or I can fire up <code>M-x calc</code>
and get the result, or I can play extra smart and devise the following
command (which I did not actually devise - I&#8217;m pretty sure I saw it
in someone else&#8217;s config a while back):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">eval-and-replace</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Replace the preceding sexp with its value.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">backward-kill-sexp</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">condition-case</span> <span class="no">nil</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">prin1</span> <span class="p">(</span><span class="nb">eval</span> <span class="p">(</span><span class="nb">read</span> <span class="p">(</span><span class="nv">current-kill</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>             <span class="p">(</span><span class="nv">current-buffer</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">error</span> <span class="p">(</span><span class="nv">message</span> <span class="s">&quot;Invalid expression&quot;</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nv">insert</span> <span class="p">(</span><span class="nv">current-kill</span> <span class="mi">0</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s bind that to <code>C-c e</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c e&quot;</span><span class="p">)</span> <span class="ss">&#39;eval-end-replace</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now in the buffer I&#8217;m currently editing I can type <code>(/ 1984 16)</code> and
press <code>C-c e</code> afterwards getting the result <code>124</code> replace the original
expression. Pretty neat!</p>

<p>I&#8217;ll leave it up to you to think of more creative applications of the command.</p>

<p>This command is part of
<a href="https://github.com/bbatsov/prelude">Prelude</a>(it&#8217;s named
<code>prelude-eval-and-replace</code> there).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deleting windows]]></title>
    <link href="http://emacsredux.com/blog/2013/06/15/deleting-windows/"/>
    <updated>2013-06-15T10:28:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/06/15/deleting-windows</id>
    <content type="html"><![CDATA[<p>Every Emacs user knows that he can split the current window
horizontally (with <code>C-x 2</code>) and vertically (with <code>C-x 3</code>) as much as
he desires to. However, some Emacs users don&#8217;t know what to do with
the extra windows they&#8217;ve created when they do not them.</p>

<p>To delete the selected window, type <code>C-x 0</code> (<code>delete-window</code>).
Once a window is deleted, the space that it occupied
is given to an adjacent window (but not the minibuffer window, even if
that is the active window at the time). Deleting the window has no effect on the
buffer it used to display; the buffer continues to exist, and you can
still switch to with <code>C-x b</code> or any other buffer navigation command.</p>

<p><code>C-x 4 0</code> (<code>kill-buffer-and-window</code>) is a stronger (and fairly
unknown) command; it kills the current buffer and then deletes the
selected window (basically it combines <code>C-x k</code> and <code>C-x 0</code>). Obviously
it&#8217;s a good idea to use it on windows displaying buffers you&#8217;re no
longer needing.</p>

<p><code>C-x 1</code> (<code>delete-other-windows</code>) deletes all the windows, <em>except</em> the
selected one; the selected window expands to use the whole frame.
(This command cannot be used while the minibuffer window is active;
attempting to do so signals an error.) In the era of narrow screens I
used that command fairly often when I needed to focus on a particular
task. Now I keep my screen split in half vertically 99% of the time,
but I still use <code>C-x 1</code> from time to time when I&#8217;m about to resplit my
screen in some uncommon way.</p>

<p>Windows displaying help buffers (generally created with commands like
<code>C-h ...</code>) warrant a special mention. They can be deleted with a
single keystroke - <code>q</code>. That would delete the help window altogether
if it was created by the help command, or restore its original
content if the window existing beforehand and was reused by the help command.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open line above]]></title>
    <link href="http://emacsredux.com/blog/2013/06/15/open-line-above/"/>
    <updated>2013-06-15T09:04:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/06/15/open-line-above</id>
    <content type="html"><![CDATA[<p>This post continues a topic that was introduced in
<a href="http://emacsredux.com/blog/2013/03/26/smarter-open-line/">smarter open-line</a> few months
back.</p>

<p>Often when editing code one wishes to open a line just above the
current one, which is properly indented relative to the existing code,
and position the cursor at its beginning.  Such a feature is present
in most IDEs, such as IntelliJ IDEA, Eclipse and NetBeans. It’s
sometimes bound to <code>Control+Shift+Enter</code>. Last time I showed you how
to implement a similar function called <code>smart-open-line</code>, this time
will implement <code>smart-open-line-above</code>. Just add this snippet to your
<code>.emacs</code> (or <code>.emacs.d/init.el</code> or whatever):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">smart-open-line-above</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Insert an empty line above the current line.</span>
</span><span class='line'><span class="s">Position the cursor at it&#39;s beginning, according to the current mode.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">move-beginning-of-line</span> <span class="no">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">newline-and-indent</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">forward-line</span> <span class="mi">-1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">indent-according-to-mode</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="nv">[</span><span class="p">(</span><span class="nv">control</span> <span class="nv">shift</span> <span class="nb">return</span><span class="p">)</span><span class="nv">]</span> <span class="ss">&#39;smart-open-line-above</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Evaluate the code (or restart Emacs) and you&#8217;ll be able to use
<code>M-x smart-open-line-above</code> or <code>Control+Shift+Enter</code> (aka <code>C-S-return</code>).</p>

<p>Admittedly this keybinding kind of sucks, so here&#8217;s another option for
you - <code>M-o</code> (used by default as the prefix for some font setting
commands nobody ever uses) for <code>smart-open-line</code> and <code>M-O</code> for
<code>smart-open-line-above</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-o&quot;</span><span class="p">)</span> <span class="ss">&#39;smart-open-line</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-O&quot;</span><span class="p">)</span> <span class="ss">&#39;smart-open-line-above</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another good option would be to fold the two commands into one and use a
prefix argument to trigger the opening a new line above the current
one.</p>

<p>This command is part of
<a href="https://github.com/bbatsov/prelude">Prelude</a>(it&#8217;s named
<code>prelude-smart-open-line-above</code> there).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Emacs as a database client]]></title>
    <link href="http://emacsredux.com/blog/2013/06/13/using-emacs-as-a-database-client/"/>
    <updated>2013-06-13T15:15:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/06/13/using-emacs-as-a-database-client</id>
    <content type="html"><![CDATA[<p>Most people that use Emacs are programmers - that&#8217;s a fact!
Most programmers have to deal with relational databases - that&#8217;s also a fact!</p>

<p>Programmers often interact with the database they have to use via some
dedicated client - be it a console or a GUI one. One fairly little
known fact about Emacs is that it features a mode that wraps around
terminal database clients, called <code>SQLi</code>. The mode allows you to
interact with a relational database from the comfort of Emacs. Sure,
you can run a terminal client like <code>psql</code> directly from <code>ansi-term</code>
(for instance) as well - but if you&#8217;re using a client with no
<code>readline</code> support (like the default clients for Oracle and DB2)
you&#8217;ll certainly appreciate <code>SQLi</code>.</p>

<p>Let&#8217;s play a bit with <code>SQLi</code>. To create a PostgreSQL connection start
by running <code>M-x sql-postgres</code>. You&#8217;ll be prompted for username, database,
password and host and then you&#8217;ll be dropped in a buffer dedicated to the
connection you&#8217;ve specified. Apart from being able to run all sorts of
SQL in that buffer you&#8217;ll also be able to send to it SQL from <code>.sql</code>
files you&#8217;re editing in Emacs.</p>

<p>Let&#8217;s see how you can do that in a bit more detail.  First you have to
associated an SQL file with a connection. While in some <code>.sql</code> file
execute <code>M-x sql-set-product</code> and type <code>postgres</code>. Afterwards do <code>M-x
sql-set-sqli-buffer</code> and select the name of the connection buffer you
want to use (it&#8217;s probably called <code>*SQL*</code> if you have only one
connection buffer).  Now you&#8217;ll be able to use commands like
<code>sql-send-region</code> (<code>C-c C-r</code>) from the <code>.sql</code> buffer and the code from
the region will be executed in the associated connection buffer.</p>

<p>Have a look at the documentation of <code>sql-mode</code> for further details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continue a comment on the next line]]></title>
    <link href="http://emacsredux.com/blog/2013/06/05/continue-a-comment-on-the-next-line/"/>
    <updated>2013-06-05T16:12:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/06/05/continue-a-comment-on-the-next-line</id>
    <content type="html"><![CDATA[<p>When writing code from time to time we have to write comments as
well. Most of the time programmers are using single-line comments,
denoted by some special starting character(s), like <code>#</code>, <code>//</code>,
etc. When you want to write a few lines of comments in Emacs you have two
options:</p>

<h4>Option A</h4>

<ul>
<li>Write the first line of the comment.</li>
<li>Go to the next line.</li>
<li>Insert the comment delimiter.</li>
<li>Continue writing the comment.</li>
</ul>


<h4>Option B (editor&#8217;s choice)</h4>

<ul>
<li>White the first line of the comment.</li>
<li>Press <code>M-j</code> (<code>indent-new-comment-line</code>).</li>
<li>Continue writing the comment on the second line.</li>
</ul>


<p>The command breaks the line at point and indents the following line,
continuing the comment if invoked within one. The indentation on the
second line matches the indentation on the first line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># first line</span>
</span><span class='line'><span class="c1">#     indented line|(we press `M-j` here)</span>
</span><span class='line'><span class="c1">#     |(we get here after pressing `M-j`)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This command is intended for styles where you write a comment per
line, starting a new comment (and terminating it if necessary) on each
line.  If you want to continue one comment of the type <code>/* */</code> across
several lines, use <code>C-j</code> (<code>newline-and-indent</code>).</p>

<p>Outside of comments <code>M-j</code> behaves pretty much the same way as <code>C-j</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Highlight lines that exceed a certain length limit]]></title>
    <link href="http://emacsredux.com/blog/2013/05/31/highlight-lines-that-exceed-a-certain-length-limit/"/>
    <updated>2013-05-31T15:18:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/05/31/highlight-lines-that-exceed-a-certain-length-limit</id>
    <content type="html"><![CDATA[<p>When you&#8217;re writing code you usually have to take into account the
programming language&#8217;s convention for maximum line length. Most
programming languages urge hackers to keep line length under 80
characters(although in recent years it has often been argued that such
rules should be relaxed to 100-120 characters, given the state of
current computer displays).</p>

<p>There are many ways to highlight lines that exceed a certain length in
Emacs, but I find one to be particularly elegant - the use of the
built-in <code>whitespace-mode</code>. Most people use <code>whitespace-mode</code> to
visualize spaces, tabs and trailing whitespace, but it can actually do
a bit more that that. Here&#8217;s the magic config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;whitespace</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">whitespace-line-column</span> <span class="mi">80</span><span class="p">)</span> <span class="c1">;; limit line length</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">whitespace-style</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">face</span> <span class="nv">lines-tail</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;prog-mode-hook</span> <span class="ss">&#39;whitespace-mode</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above snippet will enable <code>whitespace-mode</code> only in major modes
for programming. If you want to enable <code>whitespace-mode</code> everywhere
you might want to do this instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">global-whitespace-mode</span> <span class="mi">+1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>whitespace-line-count</code> determines that maximum line length; feel free
to set this to whatever value suits you. <code>whitespace-style</code> determines
what kind of stuff <code>whitespace-mode</code> is going to highlight. At this
example we want to highlight only the part of lines exceeding the line
length limit. Take a look at <code>whitespace-style</code>&#8217;s documentation for
more details(<code>C-h v RET whitespace-style</code>).</p>

<p>Here&#8217;s the result:</p>

<p><img src="http://emacsredux.com/images/articles/long-lines.png"></p>

<p>It will probably come as no surprise that this functionality is
enabled out-of-the-box in <a href="https://github.com/bbatsov/prelude">Prelude</a>.</p>
]]></content>
  </entry>
  
</feed>
