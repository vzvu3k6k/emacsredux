<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Utils | Emacs Redux]]></title>
  <link href="http://emacsredux.com/blog/categories/utils/atom.xml" rel="self"/>
  <link href="http://emacsredux.com/"/>
  <updated>2014-03-01T17:42:52+02:00</updated>
  <id>http://emacsredux.com/</id>
  <author>
    <name><![CDATA[Bozhidar Batsov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make use of the Super key]]></title>
    <link href="http://emacsredux.com/blog/2013/07/17/make-use-of-the-super-key/"/>
    <updated>2013-07-17T16:16:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/07/17/make-use-of-the-super-key</id>
    <content type="html"><![CDATA[<p>Emacs users have a lot of power at their disposal, but in one
department they are always short - the number of available
non-complex keybindings that they can leverage.</p>

<p>Obviously nobody likes pressing keybindings like <code>C-p C-v k</code> (or
something like that). One way to get your hands on some extra
keybindings is to utilize the <code>Super</code> key (it's the <code>Windows</code> key on
Win keyboards and the <code>Command</code> key on Mac keyboards (although most
people remap <code>Command</code> to <code>Meta</code> and <code>Option</code> to <code>Super</code>)). One great
thing about <code>Super</code> is that you generally have two of them, which
makes them touch-typing friend. Since almost no packages use those
keys you're left with plenty of options.</p>

<p><a href="https://github.com/bbatsov/prelude">Prelude</a> defines a bunch of
global keybindings that use the <code>Super</code> key.</p>

<p><code>cl
;; make some use of the Super key
(define-key global-map [?\s-d] 'projectile-find-dir)
(define-key global-map [?\s-e] 'er/expand-region)
(define-key global-map [?\s-f] 'projectile-find-file)
(define-key global-map [?\s-g] 'projectile-grep)
(define-key global-map [?\s-j] 'prelude-top-join-line)
(define-key global-map [?\s-k] 'prelude-kill-whole-line)
(define-key global-map [?\s-l] 'goto-line)
(define-key global-map [?\s-m] 'magit-status)
(define-key global-map [?\s-o] 'prelude-open-line-above)
(define-key global-map [?\s-w] 'delete-frame)
(define-key global-map [?\s-x] 'exchange-point-and-mark)
(define-key global-map [?\s-p] 'projectile-switch-project)
</code></p>

<p>If you find pressing <code>Super</code> comfortable obviously you have the
potential to add quite a lot more keybindings to this list.</p>

<p><strong>P.S.</strong> Some keyboards (notably laptop ones) have a <code>Fn</code> key as well
  that's also usable in Emacs keybindings. Somewhat funny that key is
  known in Emacs as <code>Hyper</code> (<code>Star Wars</code> fans are undoubtedly adding a
  <strong>Hyper-Space</strong> keybinding to their setups right about now).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advise multiple commands in the same manner]]></title>
    <link href="http://emacsredux.com/blog/2013/07/17/advise-multiple-commands-in-the-same-manner/"/>
    <updated>2013-07-17T16:15:00+03:00</updated>
    <id>http://emacsredux.com/blog/2013/07/17/advise-multiple-commands-in-the-same-manner</id>
    <content type="html"><![CDATA[<p>One of the well known features of
<a href="https://github.com/bbatsov/prelude">Prelude</a> is that it saves buffers
with changes in them automatically when you jump between
windows. This is achieved with several simple <code>defadvice</code>s and without
going into many details the advice code for that feature might look like this:</p>

<p><code>cl
;; automatically save buffers associated with files on buffer switch
;; and on windows switch
(defadvice switch-to-buffer (before switch-to-buffer-auto-save activate)
  (prelude-auto-save))
(defadvice other-window (before other-window-auto-save activate)
  (prelude-auto-save))
(defadvice windmove-up (before other-window-auto-save activate)
  (prelude-auto-save))
(defadvice windmove-down (before other-window-auto-save activate)
  (prelude-auto-save))
(defadvice windmove-left (before other-window-auto-save activate)
  (prelude-auto-save))
(defadvice windmove-right (before other-window-auto-save activate)
  (prelude-auto-save))
</code></p>

<p>Ouch - that a lot of redundant code! Luckily we can take care of the
redundancy by introducing a macro to generate multiple advices with
the same body:</p>

<p>``` cl
(defmacro advise-commands (advice-name commands &amp;rest body)
  "Apply advice named ADVICE-NAME to multiple COMMANDS.</p>

<p>The body of the advice is in BODY."
  `(progn</p>

<pre><code> ,@(mapcar (lambda (command)
             `(defadvice ,command (before ,(intern (concat (symbol-name command) "-" advice-name)) activate)
                ,@body))
           commands)))
</code></pre>

<p>```</p>

<p>Looks a bit scary, doesn't it? But it allows us to reduce the original code down to:</p>

<p>``` cl
;; advise all window switching functions
(advise-commands "auto-save"</p>

<pre><code>             (switch-to-buffer other-window windmove-up windmove-down windmove-left windmove-right)
             (prelude-auto-save))
</code></pre>

<p>```</p>

<p><code>macroexpand</code> can show us how the macro gets expanded:</p>

<p>``` cl
(macroexpand '(advise-commands "auto-save"</p>

<pre><code>             (switch-to-buffer other-window windmove-up windmove-down windmove-left windmove-right)
             (prelude-auto-save)))
</code></pre>

<p>(progn
  (defadvice switch-to-buffer</p>

<pre><code>(before switch-to-buffer-auto-save activate)
(prelude-auto-save))
</code></pre>

<p>  (defadvice other-window</p>

<pre><code>(before other-window-auto-save activate)
(prelude-auto-save))
</code></pre>

<p>  (defadvice windmove-up</p>

<pre><code>(before windmove-up-auto-save activate)
(prelude-auto-save))
</code></pre>

<p>  (defadvice windmove-down</p>

<pre><code>(before windmove-down-auto-save activate)
(prelude-auto-save))
</code></pre>

<p>  (defadvice windmove-left</p>

<pre><code>(before windmove-left-auto-save activate)
(prelude-auto-save))
</code></pre>

<p>  (defadvice windmove-right</p>

<pre><code>(before windmove-right-auto-save activate)
(prelude-auto-save)))
</code></pre>

<p>```</p>

<p>Obviously if we want the macro to be truly universal we should factor
out the hardcoded <code>before</code> and <code>activate</code> <code>defadvice</code> params, but
that's beside the point. The point is that when you need to generate
some code Emacs Lisp's macros have your back.</p>
]]></content>
  </entry>
  
</feed>
