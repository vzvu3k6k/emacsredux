<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Emacs24.4 | Emacs Redux]]></title>
  <link href="http://emacsredux.com/blog/categories/emacs24-dot-4/atom.xml" rel="self"/>
  <link href="http://emacsredux.com/"/>
  <updated>2014-03-22T16:15:25+02:00</updated>
  <id>http://emacsredux.com/</id>
  <author>
    <name><![CDATA[Bozhidar Batsov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A peek at Emacs 24.4: Focus Hooks]]></title>
    <link href="http://emacsredux.com/blog/2014/03/22/a-peek-at-emacs-24-dot-4-focus-hooks/"/>
    <updated>2014-03-22T16:05:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/03/22/a-peek-at-emacs-24-dot-4-focus-hooks</id>
    <content type="html"><![CDATA[<p>A couple of years ago I
<a href="http://batsov.com/articles/2012/03/08/emacs-tip-number-5-save-buffers-automatically-on-buffer-or-window-switch/">lamented over the lack of frame focus hooks in Emacs</a>. This
prohibited us from implemented a feature like IntelliJ IDEA's "auto-save on
focus lost", which was kind of frustrating as we're generally assuming that everything is doable in Emacs!</p>

<p>All this changes in Emacs 24.4 with the introduction of two new hooks - <code>focus-in-hook</code> and <code>focus-out-hook</code>.
The first is triggered when the current frame gains focus and the second when the frame loses focus.
So, if we want to save our active buffer when the Emacs frame loses focus we can simply do it like this:</p>

<p><code>cl
(add-hook 'focus-out-hook 'save-buffer)
</code></p>

<p>Or you can go a step further and save all the buffers:</p>

<p><code>cl
(add-hook 'focus-out-hook (lambda () (save-some-buffers t)))
</code></p>

<p>I pretty sure you'll find other creative ways to apply those new hooks to good use!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A peek at Emacs 24.4: delete-duplicate-lines]]></title>
    <link href="http://emacsredux.com/blog/2014/03/01/a-peek-at-emacs-24-dot-4-delete-duplicate-lines/"/>
    <updated>2014-03-01T17:33:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/03/01/a-peek-at-emacs-24-dot-4-delete-duplicate-lines</id>
    <content type="html"><![CDATA[<p>Emacs 24.4 introduces the command <code>delete-duplicate-lines</code>.</p>

<p>By default <code>M-x delete-duplicate-lines</code> will delete all but one copy
of any identical lines in the region. So assuming this is the region:</p>

<p><code>
test
dup
dup
one
two
one
three
one
test
five
</code></p>

<p>it will be reduced to this:</p>

<p><code>
test
dup
one
two
three
five
</code></p>

<p>When the command is invoked with a <code>C-u</code> prefix, it searches backwards
and keeps the last instance of each repeated line. So this:</p>

<p><code>
test
dup
dup
one
two
one
three
one
test
five
</code></p>

<p>will become:</p>

<p><code>
dup
two
three
one
test
five
</code></p>

<p>Identical lines need not be adjacent, unless you've invoked the
command with a <code>C-u C-u</code> prefix.  When the command is invoked with a
<code>C-u C-u C-u</code> prefix, it retains repeated blank lines.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A peek at Emacs 24.4: auto-indentation by default]]></title>
    <link href="http://emacsredux.com/blog/2014/01/19/a-peek-at-emacs-24-dot-4-auto-indentation-by-default/"/>
    <updated>2014-01-19T08:52:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/01/19/a-peek-at-emacs-24-dot-4-auto-indentation-by-default</id>
    <content type="html"><![CDATA[<p>I've written in the past about
<a href="http://emacsredux.com/blog/2013/03/29/automatic-electric-indentation/">electric-indent-mode</a>,
which was added in Emacs 24.1. In Emacs 24.4 one of the most prominent
user visible changes is that it's enabled out-of-the box. That's a
huge step towards the "modernization" of Emacs and one of the bigger
changes to the defaults in recent times. Let's review briefly how the
mode works with a couple of Ruby examples (<code>|</code> signifies the cursor
position). Without <code>electric-indent-mode</code>:</p>

<p><code>ruby
def something|
</code></p>

<p>After you press <code>Return</code> you'll get:</p>

<p><code>ruby
def something
|
</code></p>

<p>With it:</p>

<p><code>ruby
def something|
</code></p>

<p>After you press <code>Return</code> you'll get:</p>

<p><code>ruby
def something
  |
</code></p>

<p>Nice, ah?</p>

<p>One problem with <code>electric-indent-mode</code> is that it doesn't play nice
with some (mostly third-party) modes (<code>yaml-mode</code>, <code>slim-mode</code>,
etc). I guess the situation will improve over time, but for now you
can simply disable the mode in such problematic cases:</p>

<p><code>cl
(add-hook 'yaml-mode-hook (lambda () (electric-indent-local-mode -1)))
</code></p>

<p>Note that <code>electric-indent-local-mode</code> was introduced in Emacs 24.4.</p>

<p>If you want to make a major mode electric-indent aware, have a look at
the documentation of <code>electric-indent-functions</code> and
<code>electric-indent-chars</code>.</p>

<p><strong>P.S.</strong></p>

<p>Dmitry Gutov recently wrote
<a href="http://dgutov.github.io/blog/2014/01/20/electric-indentation-in-ruby-in-emacs-24-dot-4/">more on the topic</a>
in the context of <code>ruby-mode</code> in Emacs 24.4.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A peek at Emacs 24.4: sRGB colours on OS X]]></title>
    <link href="http://emacsredux.com/blog/2014/01/11/a-peek-at-emacs-24-dot-4-srgb-colours-on-os-x/"/>
    <updated>2014-01-11T13:40:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/01/11/a-peek-at-emacs-24-dot-4-srgb-colours-on-os-x</id>
    <content type="html"><![CDATA[<p>A while ago I wrote about a
<a href="http://emacsredux.com/blog/2013/08/21/color-themes-redux/">colour theme problem specific to OS X</a>.
Thankfully in Emacs 24.4 the OS X (a.k.a. NS) port of Emacs uses sRGB
colours by default (at least on OS X Lion (10.7) and newer), so you'll
no longer need to install Emacs from <code>homebrew</code> (or apply an sRGB
colour support patch manually). If for some reason you want to stick
to the colours add this to your Emacs config:</p>

<p><code>cl
(setq ns-use-srgb-colorspace nil)
</code></p>

<p>I doubt that anyone would want to do that, but the option is there for those of you who want it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A peek at Emacs 24.4: Rectangular selection]]></title>
    <link href="http://emacsredux.com/blog/2014/01/01/a-peek-at-emacs-24-dot-4-rectangular-selection/"/>
    <updated>2014-01-01T12:03:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/01/01/a-peek-at-emacs-24-dot-4-rectangular-selection</id>
    <content type="html"><![CDATA[<p>I'm extremely fond of rectangle editing (the ability to select a
rectangular region and apply editing commands only to it), but I've
always disliked the fact there was no way to visually highlight the
exact rectangle region you've currently selected. Let's delete some
text in a rectangular region (with <code>C-x r d</code>), so you can see where the
problem lies:</p>

<p><img src="/images/articles/rect-old.gif"></p>

<p>It's not immediately clear where the rectangle bounds are (it's clear
where the rectangle region starts, but it's not so clear where it
ends), which is a source of constant confusion for many people.</p>

<p>Emacs 24.4 finally fixed this with the introduction of
<code>rectangle-mark-mode</code> (bound by default to <code>C-x SPC</code>). Let's see it in
action:</p>

<p><img src="/images/articles/rect-new.gif"></p>

<p>Perfect!</p>
]]></content>
  </entry>
  
</feed>
